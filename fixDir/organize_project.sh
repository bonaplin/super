#!/bin/bash
# =============================================================================
# ORGANIZADOR AUTOM√ÅTICO DO LAPTOP OPTIMIZER
# Cria estrutura correta e move ficheiros para locais adequados
# =============================================================================

set -euo pipefail

echo "üöÄ ORGANIZANDO PROJETO LAPTOP OPTIMIZER"
echo "======================================="
echo ""

# Verificar se estamos no diret√≥rio correto
if [[ ! -f "main_optimizer_script.sh" ]]; then
    echo "‚ùå Erro: main_optimizer_script.sh n√£o encontrado!"
    echo "   Execute este script no diret√≥rio onde est√£o todos os ficheiros"
    exit 1
fi

echo "‚úÖ Ficheiros encontrados no diret√≥rio atual"
echo ""

# =============================================================================
# CRIAR ESTRUTURA DE DIRET√ìRIOS
# =============================================================================

echo "üìÅ Criando estrutura de diret√≥rios..."

mkdir -p lib
mkdir -p modules  
mkdir -p config
mkdir -p tests
mkdir -p tools

echo "   ‚úÖ Diret√≥rios criados: lib/ modules/ config/ tests/ tools/"
echo ""

# =============================================================================
# MOVER BIBLIOTECAS
# =============================================================================

echo "üìö Organizando bibliotecas..."

# Bibliotecas principais
[[ -f "colors_lib.sh" ]] && mv "colors_lib.sh" "lib/colors.sh" && echo "   ‚úÖ colors_lib.sh ‚Üí lib/colors.sh"
[[ -f "common_lib.sh" ]] && mv "common_lib.sh" "lib/common.sh" && echo "   ‚úÖ common_lib.sh ‚Üí lib/common.sh"
[[ -f "validation_lib.sh" ]] && mv "validation_lib.sh" "lib/validation.sh" && echo "   ‚úÖ validation_lib.sh ‚Üí lib/validation.sh"
[[ -f "backup_lib.sh" ]] && mv "backup_lib.sh" "lib/backup.sh" && echo "   ‚úÖ backup_lib.sh ‚Üí lib/backup.sh"

echo ""

# =============================================================================
# MOVER M√ìDULOS
# =============================================================================

echo "üîß Organizando m√≥dulos..."

[[ -f "enterprise_conflicts_module.sh" ]] && mv "enterprise_conflicts_module.sh" "modules/enterprise-conflicts.sh" && echo "   ‚úÖ enterprise_conflicts_module.sh ‚Üí modules/enterprise-conflicts.sh"
[[ -f "development_config_module.sh" ]] && mv "development_config_module.sh" "modules/development-config.sh" && echo "   ‚úÖ development_config_module.sh ‚Üí modules/development-config.sh"
[[ -f "smart_maintenance_module.sh" ]] && mv "smart_maintenance_module.sh" "modules/smart-maintenance.sh" && echo "   ‚úÖ smart_maintenance_module.sh ‚Üí modules/smart-maintenance.sh"
[[ -f "utility_scripts_module.sh" ]] && mv "utility_scripts_module.sh" "modules/utility-scripts.sh" && echo "   ‚úÖ utility_scripts_module.sh ‚Üí modules/utility-scripts.sh"
[[ -f "docker_cleanup_module.sh" ]] && mv "docker_cleanup_module.sh" "modules/docker-cleanup.sh" && echo "   ‚úÖ docker_cleanup_module.sh ‚Üí modules/docker-cleanup.sh"
[[ -f "essential_tweaks_module.sh" ]] && mv "essential_tweaks_module.sh" "modules/essential-tweaks.sh" && echo "   ‚úÖ essential_tweaks_module.sh ‚Üí modules/essential-tweaks.sh"

echo ""

# =============================================================================
# MOVER CONFIGURA√á√ïES
# =============================================================================

echo "‚öôÔ∏è Organizando configura√ß√µes..."

[[ -f "main_config_file.sh" ]] && mv "main_config_file.sh" "config/settings.conf" && echo "   ‚úÖ main_config_file.sh ‚Üí config/settings.conf"

# Criar enterprise.conf se n√£o existir
if [[ ! -f "config/enterprise.conf" ]]; then
    cat > "config/enterprise.conf" << 'EOF'
# Configura√ß√£o empresarial - override conservador
ENTERPRISE_MODE="true"
SKIP_DNS_CONFIG="true"
SKIP_NETWORK_CONFIG="true"
AUTO_BACKUP="true"
DEFAULT_ANSWER="n"
EOF
    echo "   ‚úÖ config/enterprise.conf criado"
fi

echo ""

# =============================================================================
# MOVER TESTES
# =============================================================================

echo "üß™ Organizando testes..."

[[ -f "validate-optimizations.sh" ]] && mv "validate-optimizations.sh" "tests/" && echo "   ‚úÖ validate-optimizations.sh ‚Üí tests/"
[[ -f "benchmark.sh" ]] && mv "benchmark.sh" "tests/" && echo "   ‚úÖ benchmark.sh ‚Üí tests/"

echo ""

# =============================================================================
# SCRIPTS PRINCIPAIS
# =============================================================================

echo "üöÄ Organizando scripts principais..."

# Renomear script principal
[[ -f "main_optimizer_script.sh" ]] && mv "main_optimizer_script.sh" "laptop-optimizer-main.sh" && echo "   ‚úÖ main_optimizer_script.sh ‚Üí laptop-optimizer-main.sh"

# Mover installer
[[ -f "community_tools_installer.sh" ]] && mv "community_tools_installer.sh" "install-community-tools.sh" && echo "   ‚úÖ community_tools_installer.sh ‚Üí install-community-tools.sh"
[[ -f "setup_installer.sh" ]] && mv "setup_installer.sh" "setup.sh" && echo "   ‚úÖ setup_installer.sh ‚Üí setup.sh"

echo ""

# =============================================================================
# CRIAR SCRIPT PRINCIPAL DE ENTRADA
# =============================================================================

echo "üìÑ Criando script principal optimize-laptop.sh..."

cat > "optimize-laptop.sh" << 'EOF'
#!/bin/bash
# =============================================================================
# LAPTOP OPTIMIZER - SCRIPT PRINCIPAL 
# Ponto de entrada √∫nico para o sistema
# =============================================================================

set -euo pipefail

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly VERSION="4.0-modular"

# Verificar se est√° na estrutura correta
if [[ ! -f "$SCRIPT_DIR/lib/colors.sh" ]]; then
    echo "‚ùå Erro: Estrutura de ficheiros incorreta!"
    echo "   Execute o script organize.sh primeiro"
    exit 1
fi

# Verificar argumentos especiais
case "${1:-}" in
    "--version"|"-v")
        echo "Laptop Optimizer v$VERSION"
        exit 0
        ;;
    "--help"|"-h")
        echo "Laptop Optimizer v$VERSION - Sistema modular de otimiza√ß√£o"
        echo ""
        echo "Uso: ./optimize-laptop.sh [op√ß√£o]"
        echo ""
        echo "Op√ß√µes:"
        echo "  --version, -v    Mostrar vers√£o"
        echo "  --help, -h       Mostrar esta ajuda"
        echo ""
        echo "üìÅ Estrutura:"
        echo "  lib/             Bibliotecas comuns"
        echo "  modules/         M√≥dulos funcionais"
        echo "  config/          Configura√ß√µes"
        echo "  tests/           Testes e benchmarks"
        echo ""
        exit 0
        ;;
esac

# Carregar e executar o script principal modular
exec "$SCRIPT_DIR/laptop-optimizer-main.sh" "$@"
EOF

chmod +x "optimize-laptop.sh"
echo "   ‚úÖ optimize-laptop.sh criado e execut√°vel"

echo ""

# =============================================================================
# CRIAR README
# =============================================================================

echo "üìñ Criando README.md..."

cat > "README.md" << 'EOF'
# üöÄ Laptop Optimizer v4.0 - H√≠brido

**Sistema modular de otimiza√ß√£o para laptops Ubuntu/Debian focado em desenvolvimento**

## üöÄ Uso R√°pido

```bash
# Executar otimizador
./optimize-laptop.sh

# Ou instalar permanentemente
./setup.sh
laptop-optimizer
```

## üìã Cen√°rios

- **üè¢ Empresarial**: Op√ß√£o 9 (verifica√ß√µes de conflitos)
- **üíª Pessoal**: Op√ß√£o 8 (otimiza√ß√£o completa)  
- **üîß Primeira vez**: Op√ß√£o 1 (ferramentas da comunidade)

## üõ†Ô∏è Comandos (ap√≥s otimiza√ß√£o)

```bash
dev-status      # Dashboard do sistema
dev-clean now   # Limpeza r√°pida
dev-health      # Health check
dev-tools       # Verificar ferramentas
```

## üìÅ Estrutura

```
laptop-optimizer/
‚îú‚îÄ‚îÄ optimize-laptop.sh           # üöÄ Script principal
‚îú‚îÄ‚îÄ lib/                         # üìö Bibliotecas
‚îú‚îÄ‚îÄ modules/                     # üîß M√≥dulos funcionais
‚îú‚îÄ‚îÄ config/                      # ‚öôÔ∏è Configura√ß√µes
‚îî‚îÄ‚îÄ tests/                       # üß™ Testes e benchmarks
```

## ‚ú® Especialidades √önicas

- üè¢ **Verifica√ß√£o de conflitos empresariais** (VPN, Docker, SSH)
- üê≥ **Docker cleanup inteligente** (preserva BDs automaticamente) 
- üßπ **Sistema de manuten√ß√£o** com monitoriza√ß√£o
- ‚ö° **Scripts utilit√°rios pr√°ticos**
- üîÑ **Sistema de backup/rollback**

---
**Objetivo**: Laptop de desenvolvimento otimizado e seguro! üéØ
EOF

echo "   ‚úÖ README.md criado"

echo ""

# =============================================================================
# DAR PERMISS√ïES
# =============================================================================

echo "üîê Configurando permiss√µes..."

chmod +x *.sh 2>/dev/null || true
chmod +x lib/*.sh 2>/dev/null || true  
chmod +x modules/*.sh 2>/dev/null || true
chmod +x tests/*.sh 2>/dev/null || true

echo "   ‚úÖ Permiss√µes de execu√ß√£o configuradas"

echo ""

# =============================================================================
# VERIFICAR ESTRUTURA FINAL
# =============================================================================

echo "üîç Verificando estrutura final..."

echo ""
echo "üìÅ ESTRUTURA CRIADA:"
tree -a -L 2 2>/dev/null || {
    echo "lib/"
    ls lib/ 2>/dev/null | sed 's/^/   /'
    echo "modules/" 
    ls modules/ 2>/dev/null | sed 's/^/   /'
    echo "config/"
    ls config/ 2>/dev/null | sed 's/^/   /'
    echo "tests/"
    ls tests/ 2>/dev/null | sed 's/^/   /'
    echo ""
    echo "Scripts principais:"
    ls *.sh 2>/dev/null | sed 's/^/   /'
}

echo ""

# =============================================================================
# TESTE B√ÅSICO
# =============================================================================

echo "üß™ Teste b√°sico..."

if [[ -f "optimize-laptop.sh" ]] && [[ -f "lib/colors.sh" ]] && [[ -f "laptop-optimizer-main.sh" ]]; then
    echo "   ‚úÖ Estrutura correta criada"
    
    # Teste de carregamento
    if ./optimize-laptop.sh --version >/dev/null 2>&1; then
        echo "   ‚úÖ Script principal funcional"
    else
        echo "   ‚ö†Ô∏è Script principal pode precisar de ajustes"
    fi
else
    echo "   ‚ùå Alguns ficheiros cr√≠ticos em falta"
fi

echo ""

# =============================================================================
# RELAT√ìRIO FINAL
# =============================================================================

echo "üéâ ORGANIZA√á√ÉO CONCLU√çDA!"
echo "========================"
echo ""
echo "‚úÖ Estrutura modular criada"
echo "‚úÖ Ficheiros organizados por categoria"  
echo "‚úÖ Permiss√µes configuradas"
echo "‚úÖ Scripts principais prontos"
echo ""
echo "üöÄ PR√ìXIMOS PASSOS:"
echo "   1. Testar: ./optimize-laptop.sh --help"
echo "   2. Executar: ./optimize-laptop.sh"  
echo "   3. Ou instalar: ./setup.sh"
echo ""
echo "üìã COMANDOS DISPON√çVEIS:"
echo "   ./optimize-laptop.sh        # Menu principal"
echo "   ./optimize-laptop.sh -v     # Ver vers√£o"
echo "   ./setup.sh                  # Instalar permanentemente"
echo "   ./tests/benchmark.sh        # Testar performance"
echo ""
echo "üéØ Projeto organizado e pronto para uso!"
EOF

Agora executa estes comandos **no diret√≥rio onde tens todos os scripts**:

```bash
# 1. Criar e executar o organizador
cat > organize.sh << 'SCRIPT_CONTENT'
# (cola aqui todo o conte√∫do do script acima)
SCRIPT_CONTENT

# 2. Dar permiss√£o e executar
chmod +x organize.sh
./organize.sh
```

O script vai:
- ‚úÖ **Criar estrutura** `lib/`, `modules/`, `config/`, `tests/`
- ‚úÖ **Mover ficheiros** para locais corretos  
- ‚úÖ **Renomear** conforme necess√°rio
- ‚úÖ **Criar scripts principais** em falta
- ‚úÖ **Configurar permiss√µes** 
- ‚úÖ **Testar estrutura** final

Depois podes testar:
```bash
# Testar se funcionou
./optimize-laptop.sh --help
./optimize-laptop.sh --version

# Executar otimizador  
./optimize-laptop.sh
```

**Quer que eu crie um script ainda mais simples que fa√ßas copy/paste direto?** ü§î