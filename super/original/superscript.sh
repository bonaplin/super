#!/bin/bash
set -euo pipefail

# =============================================================================
# VERIFICA√á√ïES PR√â-INSTALA√á√ÉO AVAN√áADAS
# =============================================================================

check_system_requirements() {
    log "INFO" "Verificando requisitos do sistema..."

    # Verificar espa√ßo em disco
    local free_space_gb=$(df / | awk 'NR==2 {printf "%.1f", $4/1024/1024}')
    if (( $(echo "$free_space_gb < 5.0" | bc -l) )); then
        log "ERROR" "Espa√ßo insuficiente: ${free_space_gb}GB (m√≠nimo: 5GB)"
        exit 1
    fi

    # Verificar conectividade para downloads
    log "INFO" "Verificando conectividade..."
    if ! ping -c 1 google.com >/dev/null 2>&1; then
        log "WARNING" "Sem conectividade - algumas ferramentas podem falhar"
        if ! ask_user "Continuar sem conectividade?" "n"; then
            exit 1
        fi
    fi

    # Verificar integridade do sistema
    log "INFO" "Verificando integridade do sistema..."
    if command -v debsums >/dev/null 2>&1; then
        local corrupted=$(debsums -s 2>/dev/null | wc -l)
        if [[ $corrupted -gt 0 ]]; then
            log "WARNING" "$corrupted pacotes com problemas detectados"
        fi
    fi

    # Verificar temperatura do sistema
    if [[ -f /sys/class/thermal/thermal_zone0/temp ]]; then
        local temp_c=$(($(cat /sys/class/thermal/thermal_zone0/temp) / 1000))
        if [[ $temp_c -gt 75 ]]; then
            log "WARNING" "Sistema quente: ${temp_c}¬∞C - considera aguardar arrefecimento"
        fi
    fi

    log "SUCCESS" "Requisitos verificados: ${free_space_gb}GB livre, sistema √≠ntegro"
}

# =============================================================================
# VERIFICA√á√ïES INICIAIS MELHORADAS
# =============================================================================

check_prerequisites() {
    log "INFO" "Verificando pr√©-requisitos do sistema..."

    # Verificar se est√° a correr como utilizador normal (n√£o root)
    if [[ $EUID -eq 0 ]]; then
        log "ERROR" "Este script N√ÉO deve ser executado como root!"
        log "ERROR" "Execute como utilizador normal: ./script.sh"
        exit 1
    fi

    # Verificar se tem sudo
    if ! sudo -n true 2>/dev/null; then
        log "INFO" "A verificar permiss√µes sudo..."
        sudo -v
    fi

    # Verificar comandos cr√≠ticos que o script vai precisar
    local critical_commands=("apt" "systemctl" "df" "free" "nproc" "bc")
    local missing_commands=()

    for cmd in "${critical_commands[@]}"; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            missing_commands+=("$cmd")
        fi
    done

    if [[ ${#missing_commands[@]} -gt 0 ]]; then
        log "ERROR" "Comandos cr√≠ticos em falta: ${missing_commands[*]}"
        log "ERROR" "Este script requer um sistema Ubuntu/Debian padr√£o"
        exit 1
    fi

    # Verificar se √© Ubuntu/Debian
    if [[ ! -f /etc/debian_version ]]; then
        log "WARNING" "Sistema n√£o-Debian detectado. Algumas funcionalidades podem n√£o funcionar."
        if ! ask_user "Continuar mesmo assim?" "n"; then
            exit 1
        fi
    fi

    # Verificar se j√° existe configura√ß√£o pr√©via
    if [[ -f /etc/sysctl.d/99-dev-performance-conservative.conf ]]; then
        log "WARNING" "Configura√ß√£o pr√©via detectada"
        if ask_user "Remover configura√ß√£o anterior e reconfigurar?" "y"; then
            cleanup_previous_config
        fi
    fi

    log "SUCCESS" "Pr√©-requisitos verificados"
}

cleanup_previous_config() {
    log "INFO" "Removendo configura√ß√µes anteriores..."

    # Remover configura√ß√µes de sysctl
    sudo rm -f /etc/sysctl.d/99-dev-performance-*.conf

    # Remover cron jobs
    sudo rm -f /etc/cron.d/dev-maintenance-*

    # Remover scripts utilit√°rios (ser√£o recriados)
    sudo rm -f /usr/local/bin/dev-*

    log "SUCCESS" "Configura√ß√µes anteriores removidas"
}

# =============================================================================
# Ubuntu Development Performance Optimizer - Vers√£o Empresarial Focada
# Apenas otimiza√ß√µes essenciais + manuten√ß√£o para laptop de trabalho
# üÜï NOVA VERS√ÉO: ZSH + OH-MY-ZSH + ZOXIDE + DIRENV + VERIFICA√á√ïES EMPRESARIAIS
# =============================================================================

readonly SCRIPT_NAME="Ubuntu Dev Optimizer - Enterprise Enhanced"
readonly SCRIPT_VERSION="3.0-zsh-enhanced"
readonly BACKUP_DIR="$HOME/.ubuntu-dev-backup-$(date +%Y%m%d-%H%M%S)"
readonly LOG_FILE="/tmp/ubuntu-dev-optimizer.log"

# Cores para output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m'

# Vari√°veis de sistema
RAM_GB=0
CPU_CORES=0
STORAGE_TYPE=""
KERNEL_VERSION=""
BBR_SUPPORTED=false

# Vari√°veis de controle de conflitos
SKIP_DNS_CONFIG=false
SKIP_NETWORK_CONFIG=false
SKIP_SSH_HARDENING=false
SKIP_FIREWALL_CONFIG=false

# =============================================================================
# VERIFICA√á√ïES DE CONFLITOS EMPRESARIAIS
# =============================================================================

check_enterprise_conflicts() {
    log "INFO" "üîç Verificando poss√≠veis conflitos empresariais..."

    # 1. VERIFICAR CONFLITOS VPN
    check_vpn_conflicts

    # 2. VERIFICAR CONFLITOS DOCKER
    check_docker_conflicts

    # 3. VERIFICAR CONFLITOS SSH
    check_ssh_conflicts

    # 4. VERIFICAR CONFLITOS DNS
    check_dns_conflicts

    # 5. VERIFICAR CONFLITOS FIREWALL
    check_firewall_conflicts

    log "SUCCESS" "Verifica√ß√£o de conflitos conclu√≠da"
}

check_vpn_conflicts() {
    log "INFO" "üîç Verificando conflitos com VPN empresarial..."

    # Detectar se h√° VPN ativa
    local vpn_active=false
    if ip route | grep -q "tun\|tap\|ppp" || pgrep -f "openvpn\|openconnect\|strongswan" >/dev/null; then
        vpn_active=true
        log "WARNING" "VPN detectada ativa"
    fi

    # CONFLITO 1: DNS
    if [[ "$vpn_active" == true ]]; then
        log "WARNING" "‚ö†Ô∏è CONFLITO POTENCIAL: DNS"
        echo "   ‚Ä¢ VPN ativa pode conflitar com DNS otimizado (CloudFlare + Google)"
        echo "   ‚Ä¢ VPN empresarial geralmente for√ßa seus pr√≥prios DNS"
        echo "   ‚Ä¢ PADR√ÉO Ubuntu: systemd-resolved com DNS autom√°tico"
        echo "   ‚Ä¢ OTIMIZADO: DNS fixos 1.1.1.1, 8.8.8.8"

        if ! ask_user "Aplicar DNS otimizado mesmo com VPN? (pode causar problemas)" "n"; then
            echo "   ‚úÖ Mantendo DNS padr√£o Ubuntu (compat√≠vel com VPN)"
            SKIP_DNS_CONFIG=true
        fi
    fi

    # CONFLITO 2: Configura√ß√µes de rede
    if [[ "$vpn_active" == true ]]; then
        log "WARNING" "‚ö†Ô∏è CONFLITO POTENCIAL: Configura√ß√µes de rede"
        echo "   ‚Ä¢ VPN pode ser afetada por mudan√ßas nos buffers de rede"
        echo "   ‚Ä¢ PADR√ÉO Ubuntu: rmem_max=212992, wmem_max=212992"
        echo "   ‚Ä¢ OTIMIZADO: rmem_max=2097152, wmem_max=2097152 (10x maior)"

        if ! ask_user "Aplicar otimiza√ß√µes de rede com VPN ativa? (pode afetar conex√£o)" "n"; then
            echo "   ‚úÖ Mantendo configura√ß√µes de rede padr√£o (compat√≠vel com VPN)"
            SKIP_NETWORK_CONFIG=true
        fi
    fi

    return 0
}

check_docker_conflicts() {
    log "INFO" "üîç Verificando conflitos com Docker..."

    if command -v docker >/dev/null 2>&1; then
        log "INFO" "Docker detectado - verificando configura√ß√µes..."

        # CONFLITO 1: Bridge networks
        echo "   ‚Ä¢ PADR√ÉO Docker: bridge network 172.17.0.0/16"
        echo "   ‚Ä¢ POTENCIAL CONFLITO: altera√ß√µes de rede podem afetar containers"

        if ! ask_user "Aplicar otimiza√ß√µes de rede com Docker presente? (testado mas pode haver issues)" "y"; then
            echo "   ‚úÖ Pulando otimiza√ß√µes de rede para Docker"
            SKIP_NETWORK_CONFIG=true
        fi

        # CONFLITO 2: Storage optimizations
        if [[ -d /var/lib/docker ]]; then
            local docker_size=$(du -sh /var/lib/docker 2>/dev/null | cut -f1 || echo "desconhecido")
            echo "   ‚Ä¢ Docker usando: $docker_size de espa√ßo"
            echo "   ‚Ä¢ Otimiza√ß√µes de SSD podem afetar performance de volumes"

            if ! ask_user "Aplicar otimiza√ß√µes de storage com Docker? (pode afetar volumes)" "y"; then
                echo "   ‚úÖ Otimiza√ß√µes de storage conservadoras para Docker"
                # N√£o definir flag, mas usar configura√ß√µes mais conservadoras
            fi
        fi
    fi

    return 0
}

check_ssh_conflicts() {
    log "INFO" "üîç Verificando conflitos SSH empresariais..."

    if systemctl is-active --quiet ssh; then
        log "WARNING" "SSH server ativo - verificando hardening..."

        # Verificar se h√° configura√ß√µes SSH empresariais existentes
        if [[ -f /etc/ssh/sshd_config ]] && grep -q "# Company\|# Enterprise\|# Corporate" /etc/ssh/sshd_config; then
            log "WARNING" "‚ö†Ô∏è CONFLITO: Configura√ß√µes SSH empresariais detectadas"
            echo "   ‚Ä¢ SSH pode ter configura√ß√µes mandat√≥rias da empresa"
            echo "   ‚Ä¢ Hardening pode conflitar com pol√≠ticas empresariais"

            if ! ask_user "Aplicar hardening SSH adicional? (pode conflitar com pol√≠ticas)" "n"; then
                echo "   ‚úÖ Mantendo configura√ß√µes SSH empresariais existentes"
                SKIP_SSH_HARDENING=true
            fi
        fi

        # Verificar fail2ban vs sistemas de monitoriza√ß√£o
        echo "   ‚Ä¢ ADICIONAL: fail2ban para prote√ß√£o contra ataques"
        echo "   ‚Ä¢ POTENCIAL CONFLITO: pode conflitar com sistemas de monitoriza√ß√£o empresarial"

        if ! ask_user "Instalar fail2ban? (pode gerar alertas no SOC da empresa)" "y"; then
            echo "   ‚úÖ Pulando fail2ban (evitando alertas de seguran√ßa)"
            # Ser√° tratado na fun√ß√£o espec√≠fica
        fi
    fi

    return 0
}

check_dns_conflicts() {
    log "INFO" "üîç Verificando conflitos DNS..."

    # Verificar se h√° configura√ß√µes DNS empresariais
    if [[ -f /etc/systemd/resolved.conf ]] && grep -q "DNS=" /etc/systemd/resolved.conf; then
        local current_dns=$(grep "^DNS=" /etc/systemd/resolved.conf | cut -d= -f2)
        if [[ -n "$current_dns" && "$current_dns" != "1.1.1.1" ]]; then
            log "WARNING" "‚ö†Ô∏è DNS empresarial detectado: $current_dns"
            echo "   ‚Ä¢ DNS atual pode ser mandat√≥rio da empresa"
            echo "   ‚Ä¢ Mudan√ßa pode quebrar acesso a recursos internos"

            if ! ask_user "Substituir DNS empresarial por CloudFlare+Google?" "n"; then
                echo "   ‚úÖ Mantendo DNS empresarial existente"
                SKIP_DNS_CONFIG=true
            fi
        fi
    fi

    return 0
}

check_firewall_conflicts() {
    log "INFO" "üîç Verificando conflitos de firewall..."

    # Verificar se h√° firewall empresarial ativo
    if command -v ufw >/dev/null && ufw status | grep -q "active"; then
        local ufw_rules=$(ufw status numbered | wc -l)
        if [[ $ufw_rules -gt 10 ]]; then
            log "WARNING" "‚ö†Ô∏è Firewall empresarial detectado ($ufw_rules regras)"
            echo "   ‚Ä¢ Muitas regras existentes podem ser mandat√≥rias"
            echo "   ‚Ä¢ Reset pode quebrar conectividade empresarial"

            if ! ask_user "Resetar firewall e aplicar configura√ß√£o padr√£o?" "n"; then
                echo "   ‚úÖ Mantendo configura√ß√µes de firewall existentes"
                SKIP_FIREWALL_CONFIG=true
            fi
        fi
    fi

    return 0
}

# =============================================================================
# DETEC√á√ÉO DE HARDWARE
# =============================================================================

detect_system_specs() {
    log "INFO" "Detectando especifica√ß√µes do sistema..."

    RAM_GB=$(free -g | awk '/^Mem:/{print $2}')
    CPU_CORES=$(nproc)
    KERNEL_VERSION=$(uname -r)

    # Detectar tipo de armazenamento principal
    if [[ -d /sys/block/nvme0n1 ]]; then
        STORAGE_TYPE="nvme"
    elif [[ -f /sys/block/sda/queue/rotational ]] && [[ $(cat /sys/block/sda/queue/rotational) -eq 0 ]]; then
        STORAGE_TYPE="ssd"
    else
        STORAGE_TYPE="hdd"
    fi

    # Verificar suporte BBR
    BBR_SUPPORTED=false
    if modinfo tcp_bbr >/dev/null 2>&1; then
        BBR_SUPPORTED=true
    fi

    log "SUCCESS" "Sistema detectado:"
    log "INFO" "  ‚Ä¢ RAM: ${RAM_GB}GB"
    log "INFO" "  ‚Ä¢ CPU Cores: ${CPU_CORES}"
    log "INFO" "  ‚Ä¢ Armazenamento: ${STORAGE_TYPE}"
    log "INFO" "  ‚Ä¢ Kernel: ${KERNEL_VERSION}"
    log "INFO" "  ‚Ä¢ BBR Support: ${BBR_SUPPORTED}"
}

# =============================================================================
# OTIMIZA√á√ïES CONSERVADORAS DE KERNEL
# =============================================================================

optimize_kernel_conservative() {
    log "INFO" "Aplicando otimiza√ß√µes conservadoras do kernel..."

    if [[ -f /etc/sysctl.d/99-dev-performance-conservative.conf ]]; then
        if ! ask_user "J√° existe uma config conservadora. Queres sobrescrev√™-la?" "n"; then
            log "INFO" "A configura√ß√£o existente ser√° mantida."
            return
        fi
    fi

    # Valores conservadores para ambiente de trabalho
    local dirty_ratio=10
    local dirty_bg_ratio=3
    local inotify_watches=262144
    local file_max=65536

    # Ajustar baseado na RAM (conservadoramente)

    if [[ $RAM_GB -ge 32 ]]; then
        dirty_ratio=15
        dirty_bg_ratio=5
        inotify_watches=1048576
        file_max=262144
    elif [[ $RAM_GB -ge 16 ]]; then
        dirty_ratio=15
        dirty_bg_ratio=5
        inotify_watches=524288
        file_max=131072
    elif [[ $RAM_GB -ge 8 ]]; then
        dirty_ratio=12
        dirty_bg_ratio=4
        inotify_watches=262144
        file_max=100000
    fi

    # Valores conservadores para storage
    local vm_dirty_expire=3000
    local vm_dirty_writeback=500

    if [[ "$STORAGE_TYPE" == "nvme" ]]; then
        vm_dirty_expire=2000
        vm_dirty_writeback=300
    elif [[ "$STORAGE_TYPE" == "ssd" ]]; then
        vm_dirty_expire=2500
        vm_dirty_writeback=400
    fi

    # Perguntar sobre otimiza√ß√µes de rede (considerando conflitos detectados)
    local apply_network_tuning=false
    if [[ "$SKIP_NETWORK_CONFIG" != true ]]; then
        if ask_user "Aplicar otimiza√ß√µes de rede? (pode consumir mais RAM)" "n"; then
            apply_network_tuning=true
        fi
    fi

    sudo tee /etc/sysctl.d/99-dev-performance-conservative.conf > /dev/null << EOF
# Otimiza√ß√µes CONSERVADORAS para laptop empresarial
# Sistema: ${RAM_GB}GB RAM, ${STORAGE_TYPE} storage

# === MEM√ìRIA E SWAP ===
vm.swappiness=10
vm.vfs_cache_pressure=80
vm.dirty_expire_centisecs=${vm_dirty_expire}
vm.dirty_writeback_centisecs=${vm_dirty_writeback}
vm.dirty_ratio=${dirty_ratio}
vm.dirty_background_ratio=${dirty_bg_ratio}

$(if [[ "$apply_network_tuning" == true ]]; then
cat << NETWORK_EOF
# === NETWORK OTIMIZADO (OPCIONAL) ===
# ATEN√á√ÉO: Consume mais RAM que padr√£o Ubuntu
# Ubuntu default: rmem/wmem_default=212992, max=212992
# Configura√ß√µes abaixo: default=262144, max=2097152 (2MB)

net.core.netdev_max_backlog=1000          # Ubuntu default: 1000
net.core.rmem_default=212992              # Ubuntu default: 212992
net.core.wmem_default=212992              # Ubuntu default: 212992
net.core.rmem_max=8388608                  # Ubuntu default: 212992 (aumentado para 2MB, n√£o 4MB)
net.core.wmem_max=8388608                  # Ubuntu default: 212992 (aumentado para 2MB, n√£o 4MB)

# Configura√ß√µes TCP (algumas j√° s√£o default mas expl√≠citas)
net.ipv4.tcp_window_scaling=1             # J√° √© default Ubuntu
net.ipv4.tcp_timestamps=1                 # J√° √© default Ubuntu
net.ipv4.tcp_sack=1                       # J√° √© default Ubuntu
net.ipv4.tcp_moderate_rcvbuf=1            # J√° √© default Ubuntu

# BBR apenas se suportado
$([ "$BBR_SUPPORTED" = true ] && echo "net.ipv4.tcp_congestion_control=bbr" || echo "# BBR n√£o suportado")
$([ "$BBR_SUPPORTED" = true ] && echo "net.core.default_qdisc=fq" || echo "# BBR n√£o suportado")
NETWORK_EOF
else
cat << NO_NETWORK_EOF
# === NETWORK PADR√ÉO UBUNTU (N√ÉO MODIFICADO) ===
# Mantendo configura√ß√µes padr√£o para estabilidade m√°xima
# Se precisar de otimiza√ß√µes de rede, execute novamente o script

# BBR apenas se suportado (sem impacto em RAM)
$([ "$BBR_SUPPORTED" = true ] && echo "net.ipv4.tcp_congestion_control=bbr" || echo "# BBR n√£o suportado")
$([ "$BBR_SUPPORTED" = true ] && echo "net.core.default_qdisc=fq" || echo "# BBR n√£o suportado")
NO_NETWORK_EOF
fi)

# === FILESYSTEM ===
fs.inotify.max_user_watches=${inotify_watches}
fs.inotify.max_user_instances=512
fs.file-max=${file_max}

# === DESENVOLVIMENTO === #para estabilidade
# vm.overcommit_memory=0
# kernel.shmmax=268435456
# kernel.shmall=268435456

# === SEGURAN√áA ===
kernel.kptr_restrict=1
kernel.yama.ptrace_scope=1
EOF

    sudo sysctl -p /etc/sysctl.d/99-dev-performance-conservative.conf

    if [[ "$apply_network_tuning" == true ]]; then
        log "SUCCESS" "Kernel + Network otimizado conservadoramente (buffers aumentados para 2MB)"
        log "WARNING" "üíæ Otimiza√ß√µes de rede v√£o consumir mais RAM por conex√£o"
    else
        log "SUCCESS" "Kernel otimizado conservadoramente (network padr√£o Ubuntu mantido)"
        log "INFO" "üì∂ Apenas BBR ativado se suportado - sem impacto em RAM"
    fi
}

# =============================================================================
# CONFIGURA√á√ïES IMPORTANTES PARA LAPTOP
# =============================================================================

configure_laptop_optimizations() {
    log "INFO" "Configurando otimiza√ß√µes espec√≠ficas para laptop..."

    # 1. CONFIGURAR TLP PARA GEST√ÉO DE BATERIA
    log "INFO" "Instalando e configurando TLP para gest√£o de bateria..."
    sudo apt update -qq
    sudo apt install -y tlp tlp-rdw

    # Configura√ß√£o TLP conservadora
    sudo tee /etc/tlp.d/99-laptop-work.conf > /dev/null << 'EOF'
# Configura√ß√£o TLP para laptop de trabalho

# CPU scaling governor
CPU_SCALING_GOVERNOR_ON_AC=ondemand
CPU_SCALING_GOVERNOR_ON_BAT=powersave

# CPU boost
CPU_BOOST_ON_AC=0
CPU_BOOST_ON_BAT=0

# CPU energy perf policy
CPU_ENERGY_PERF_POLICY_ON_AC=balance_performance
CPU_ENERGY_PERF_POLICY_ON_BAT=power

# Disk
DISK_APM_LEVEL_ON_AC="254 254"
DISK_APM_LEVEL_ON_BAT="128 128"

# WiFi power saving
WIFI_PWR_ON_AC=off
WIFI_PWR_ON_BAT=on

# USB autosuspend
USB_AUTOSUSPEND=1

# Audio power saving
SOUND_POWER_SAVE_ON_AC=0
SOUND_POWER_SAVE_ON_BAT=1
EOF

    sudo systemctl enable tlp

    # 2. CONFIGURAR JOURNALD PARA PROTEGER SSD
    log "INFO" "Configurando journald para proteger SSD..."
    sudo mkdir -p /etc/systemd/journald.conf.d
    sudo tee /etc/systemd/journald.conf.d/laptop-ssd.conf > /dev/null << 'EOF'
[Journal]
SystemMaxUse=200M
SystemMaxFileSize=50M
SystemMaxFiles=4
SystemKeepFree=1G
MaxRetentionSec=2week
EOF

    # 3. CONFIGURAR TMPFS PARA TEMP FILES SE RAM SUFICIENTE
    if [[ $RAM_GB -ge 8 ]]; then
        log "INFO" "Configurando tmpfs para temp files (RAM >= 8GB)..."
        if ! grep -q "tmpfs /tmp" /etc/fstab; then
            echo "tmpfs /tmp tmpfs defaults,noatime,nosuid,nodev,noexec,mode=1777,size=2G 0 0" | sudo tee -a /etc/fstab
        fi
    fi

    # 4. CONFIGURAR ZSWAP PARA MELHOR GEST√ÉO DE MEM√ìRIA
    if [[ "$STORAGE_TYPE" == "ssd" || "$STORAGE_TYPE" == "nvme" ]]; then
        log "INFO" "Configurando zswap para SSDs..."
        if ! grep -q "zswap.enabled" /etc/default/grub; then
            sudo sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT="/GRUB_CMDLINE_LINUX_DEFAULT="zswap.enabled=1 zswap.compressor=lz4 /' /etc/default/grub
            log "WARNING" "GRUB atualizado - necess√°rio update-grub ap√≥s o script"
        fi
    fi

    log "SUCCESS" "Otimiza√ß√µes de laptop configuradas"
}

# =============================================================================
# SEGURAN√áA AVAN√áADA EMPRESARIAL
# =============================================================================

configure_advanced_security() {
    log "INFO" "Configurando seguran√ßa avan√ßada empresarial..."

    # 1. FIREWALL UFW ROBUSTO (considerando conflitos)
    if [[ "$SKIP_FIREWALL_CONFIG" != true ]]; then
        configure_robust_firewall
    fi

    # 2. FAIL2BAN PARA PROTE√á√ÉO SSH (considerando conflitos)
    configure_fail2ban

    # 3. APPARMOR OTIMIZADO
    configure_apparmor

    # 4. AUTOMATIC SECURITY UPDATES MELHORADO
    configure_enhanced_auto_updates

    # 5. SSH HARDENING AVAN√áADO (considerando conflitos)
    if [[ "$SKIP_SSH_HARDENING" != true ]]; then
        configure_advanced_ssh
    fi

    # 6. VERIFICA√á√ÉO DE VULNERABILIDADES
    setup_vulnerability_monitoring

    log "SUCCESS" "Seguran√ßa avan√ßada configurada"
}

configure_robust_firewall() {
    log "INFO" "Configurando firewall robusto..."

    if command -v ufw >/dev/null; then
        sudo ufw --force reset >/dev/null 2>&1

        # Configura√ß√µes b√°sicas
        sudo ufw default deny incoming
        sudo ufw default allow outgoing
        sudo ufw logging on

        # Permitir SSH apenas se estiver ativo
        if systemctl is-active --quiet ssh; then
            sudo ufw allow ssh
            log "INFO" "SSH permitido no firewall"
        fi

        # Permitir desenvolvimento (opcionalmente)
        if ask_user "Permitir portas de desenvolvimento (3000-3999, 8000-8999)?" "y"; then
            sudo ufw allow 3000:3999/tcp
            sudo ufw allow 8000:8999/tcp
            log "INFO" "Portas de desenvolvimento permitidas"
        fi

        sudo ufw --force enable
        log "SUCCESS" "Firewall UFW configurado"
    fi
}

configure_fail2ban() {
    if ! systemctl is-active --quiet ssh; then
        log "INFO" "SSH n√£o ativo - fail2ban n√£o necess√°rio"
        return 0
    fi

    if ask_user "Instalar fail2ban para prote√ß√£o SSH?" "y"; then
        log "INFO" "Instalando fail2ban..."
        sudo apt install -y fail2ban

        # Configura√ß√£o personalizada
        sudo tee /etc/fail2ban/jail.local > /dev/null << 'EOF'
[DEFAULT]
bantime = 1h
findtime = 10m
maxretry = 3
backend = systemd

[sshd]
enabled = true
port = ssh
logpath = %(sshd_log)s
maxretry = 3
bantime = 3h
EOF

        sudo systemctl enable fail2ban
        sudo systemctl start fail2ban
        log "SUCCESS" "Fail2ban configurado para prote√ß√£o SSH"
    fi
}

configure_apparmor() {
    if command -v aa-status >/dev/null 2>&1; then
        log "INFO" "Verificando AppArmor..."

        # Verificar status
        local profiles_enforced=$(sudo aa-status 2>/dev/null | grep "profiles are in enforce mode" | awk '{print $1}' || echo "0")

        if [[ $profiles_enforced -gt 0 ]]; then
            log "SUCCESS" "AppArmor ativo: $profiles_enforced perfis em enforce mode"
        else
            log "WARNING" "AppArmor n√£o est√° ativo adequadamente"
            if ask_user "Ativar AppArmor?" "y"; then
                sudo systemctl enable apparmor
                sudo systemctl start apparmor
            fi
        fi

        # Instalar perfis adicionais
        if ask_user "Instalar perfis AppArmor adicionais?" "y"; then
            sudo apt install -y apparmor-profiles apparmor-utils
            log "SUCCESS" "Perfis AppArmor adicionais instalados"
        fi
    else
        log "INFO" "AppArmor n√£o dispon√≠vel no sistema"
    fi
}

configure_enhanced_auto_updates() {
    log "INFO" "Configurando updates de seguran√ßa melhorados..."

    sudo apt install -y unattended-upgrades apt-listchanges

    # Configura√ß√£o mais robusta
    sudo tee /etc/apt/apt.conf.d/20auto-upgrades > /dev/null << 'EOF'
APT::Periodic::Update-Package-Lists "1";
APT::Periodic::Download-Upgradeable-Packages "1";
APT::Periodic::AutocleanInterval "7";
APT::Periodic::Unattended-Upgrade "1";
APT::Periodic::Verbose "2";
EOF

    sudo tee /etc/apt/apt.conf.d/50unattended-upgrades > /dev/null << 'EOF'
Unattended-Upgrade::Allowed-Origins {
    "${distro_id}:${distro_codename}-security";
    "${distro_id}ESMApps:${distro_codename}-apps-security";
    "${distro_id}ESM:${distro_codename}-infra-security";
};

Unattended-Upgrade::AutoFixInterruptedDpkg "true";
Unattended-Upgrade::MinimalSteps "true";
Unattended-Upgrade::Remove-Unused-Dependencies "true";
Unattended-Upgrade::Automatic-Reboot "false";
Unattended-Upgrade::Automatic-Reboot-Time "02:00";

Unattended-Upgrade::Mail "root";
Unattended-Upgrade::MailOnlyOnError "true";

// Log results
Unattended-Upgrade::SyslogEnable "true";
Unattended-Upgrade::SyslogFacility "daemon";
EOF

    log "SUCCESS" "Updates de seguran√ßa autom√°ticos configurados"
}

configure_advanced_ssh() {
    if [[ ! -f /etc/ssh/sshd_config ]]; then
        return 0
    fi

    if ask_user "Aplicar hardening avan√ßado SSH?" "y"; then
        log "INFO" "Aplicando hardening SSH avan√ßado..."

        # Backup
        sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup

        # Configura√ß√µes de seguran√ßa
        sudo tee -a /etc/ssh/sshd_config.d/99-security-hardening.conf > /dev/null << 'EOF'
# SSH Security Hardening

# Authentication
PermitRootLogin no
PubkeyAuthentication yes
PasswordAuthentication yes
PermitEmptyPasswords no
ChallengeResponseAuthentication no
UsePAM yes

# Protocol and Encryption
Protocol 2
Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
MACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha2-256,hmac-sha2-512

# Connection limits
MaxAuthTries 3
MaxSessions 2
LoginGraceTime 30
ClientAliveInterval 300
ClientAliveCountMax 2

# Disable dangerous features
AllowAgentForwarding no
AllowTcpForwarding no
X11Forwarding no
PermitTunnel no
GatewayPorts no
PermitUserEnvironment no
EOF

        # Validar configura√ß√£o
        if sudo sshd -t; then
            log "SUCCESS" "SSH hardening aplicado com sucesso"
        else
            log "ERROR" "Erro na configura√ß√£o SSH - restaurando backup"
            sudo mv /etc/ssh/sshd_config.backup /etc/ssh/sshd_config
        fi
    fi
}

setup_vulnerability_monitoring() {
    log "INFO" "Configurando monitoriza√ß√£o de vulnerabilidades..."

    # Instalar lynis para auditorias de seguran√ßa
    if ask_user "Instalar Lynis para auditorias de seguran√ßa?" "y"; then
        sudo apt install -y lynis

        # Criar script de auditoria mensal
        sudo tee /usr/local/bin/security-audit > /dev/null << 'EOF'
#!/bin/bash
# Auditoria mensal de seguran√ßa

AUDIT_LOG="/var/log/security-audit-$(date +%Y%m).log"

echo "=== AUDITORIA DE SEGURAN√áA - $(date) ===" >> "$AUDIT_LOG"

# Lynis audit
lynis audit system --quiet --log-file "$AUDIT_LOG"

# Verificar updates de seguran√ßa pendentes
echo "" >> "$AUDIT_LOG"
echo "=== UPDATES DE SEGURAN√áA PENDENTES ===" >> "$AUDIT_LOG"
apt list --upgradable 2>/dev/null | grep -i security >> "$AUDIT_LOG"

# Verificar utilizadores
echo "" >> "$AUDIT_LOG"
echo "=== UTILIZADORES SYSTEM ===" >> "$AUDIT_LOG"
awk -F: '$3 >= 1000 {print $1}' /etc/passwd >> "$AUDIT_LOG"

echo "Auditoria completa. Log: $AUDIT_LOG"
EOF

        sudo chmod +x /usr/local/bin/security-audit

        # Adicionar ao cron mensal
        echo "0 2 1 * * root /usr/local/bin/security-audit" | sudo tee /etc/cron.d/security-audit > /dev/null

        log "SUCCESS" "Lynis instalado - auditoria mensal agendada"
    fi
}

# =============================================================================
# OTIMIZA√á√ïES ESPEC√çFICAS PARA SSD/NVME
# =============================================================================

optimize_storage_advanced() {
    log "INFO" "Aplicando otimiza√ß√µes avan√ßadas de armazenamento..."

    # Configurar TRIM autom√°tico para SSDs
    if [[ "$STORAGE_TYPE" == "nvme" || "$STORAGE_TYPE" == "ssd" ]]; then
        log "INFO" "Configurando TRIM autom√°tico para SSD..."

        # Habilitar fstrim timer
        sudo systemctl enable fstrim.timer
        sudo systemctl start fstrim.timer

        # Verificar se TRIM est√° suportado
        if sudo fstrim -v / >/dev/null 2>&1; then
            log "SUCCESS" "TRIM habilitado e funcional"
        else
            log "WARNING" "TRIM pode n√£o estar dispon√≠vel neste sistema"
        fi
    fi

    # Configurar schedulers espec√≠ficos por tipo de storage
    for device in /sys/block/sd* /sys/block/nvme*; do
        [[ ! -d "$device" ]] && continue

        devname=$(basename "$device")

        if [[ -f "$device/queue/rotational" ]]; then
            rotational=$(cat "$device/queue/rotational" 2>/dev/null || echo "1")

            if [[ $rotational -eq 0 ]]; then
                # SSD/NVMe: usar none ou mq-deadline dependendo do kernel
                if [[ -f "$device/queue/scheduler" ]]; then
                    available_schedulers=$(cat "$device/queue/scheduler")
                    if [[ "$available_schedulers" == *"none"* ]]; then
                        echo "none" | sudo tee "$device/queue/scheduler" >/dev/null 2>&1
                        log "SUCCESS" "SSD $devname: scheduler 'none' configurado"
                    else
                        echo "mq-deadline" | sudo tee "$device/queue/scheduler" >/dev/null 2>&1
                        log "SUCCESS" "SSD $devname: scheduler 'mq-deadline' configurado"
                    fi
                fi

                # Configura√ß√µes espec√≠ficas para SSD
                echo 0 | sudo tee "$device/queue/add_random" >/dev/null 2>&1
                echo 1 | sudo tee "$device/queue/rq_affinity" >/dev/null 2>&1

                # Read-ahead otimizado
                if [[ "$STORAGE_TYPE" == "nvme" ]]; then
                    sudo blockdev --setra 512 "/dev/$devname" 2>/dev/null || true
                else
                    sudo blockdev --setra 256 "/dev/$devname" 2>/dev/null || true
                fi

            else
                # HDD: usar mq-deadline ou deadline
                echo "mq-deadline" | sudo tee "$device/queue/scheduler" >/dev/null 2>&1
                sudo blockdev --setra 128 "/dev/$devname" 2>/dev/null || true
                log "SUCCESS" "HDD $devname otimizado"
            fi
        fi
    done

    # Configurar swapfile otimizada se n√£o existir swap
    configure_optimized_swap
}

optimize_storage_advanced() {
    log "INFO" "Aplicando otimiza√ß√µes avan√ßadas de armazenamento..."

    # Configurar TRIM autom√°tico para SSDs
    if [[ "$STORAGE_TYPE" == "nvme" || "$STORAGE_TYPE" == "ssd" ]]; then
        log "INFO" "Configurando TRIM autom√°tico para SSD..."

        # Habilitar fstrim timer
        sudo systemctl enable fstrim.timer
        sudo systemctl start fstrim.timer

        # Verificar se TRIM est√° suportado
        if sudo fstrim -v / >/dev/null 2>&1; then
            log "SUCCESS" "TRIM habilitado e funcional"
        else
            log "WARNING" "TRIM pode n√£o estar dispon√≠vel neste sistema"
        fi
    fi

    # Configurar schedulers espec√≠ficos por tipo de storage
    for device in /sys/block/sd* /sys/block/nvme*; do
        [[ ! -d "$device" ]] && continue

        devname=$(basename "$device")

        if [[ -f "$device/queue/rotational" ]]; then
            rotational=$(cat "$device/queue/rotational" 2>/dev/null || echo "1")

            if [[ $rotational -eq 0 ]]; then
                # SSD/NVMe: usar none ou mq-deadline dependendo do kernel
                if [[ -f "$device/queue/scheduler" ]]; then
                    available_schedulers=$(cat "$device/queue/scheduler")
                    if [[ "$available_schedulers" == *"none"* ]]; then
                        echo "none" | sudo tee "$device/queue/scheduler" >/dev/null 2>&1
                        log "SUCCESS" "SSD $devname: scheduler 'none' configurado"
                    else
                        echo "mq-deadline" | sudo tee "$device/queue/scheduler" >/dev/null 2>&1
                        log "SUCCESS" "SSD $devname: scheduler 'mq-deadline' configurado"
                    fi
                fi

                # Configura√ß√µes espec√≠ficas para SSD
                echo 0 | sudo tee "$device/queue/add_random" >/dev/null 2>&1
                echo 1 | sudo tee "$device/queue/rq_affinity" >/dev/null 2>&1

                # Read-ahead otimizado
                if [[ "$STORAGE_TYPE" == "nvme" ]]; then
                    sudo blockdev --setra 512 "/dev/$devname" 2>/dev/null || true
                else
                    sudo blockdev --setra 256 "/dev/$devname" 2>/dev/null || true
                fi

            else
                # HDD: usar mq-deadline ou deadline
                echo "mq-deadline" | sudo tee "$device/queue/scheduler" >/dev/null 2>&1
                sudo blockdev --setra 128 "/dev/$devname" 2>/dev/null || true
                log "SUCCESS" "HDD $devname otimizado"
            fi
        fi
    done

    # Configurar swapfile otimizada se n√£o existir swap
    configure_optimized_swap
}

configure_optimized_swap() {
    local current_swap=$(free | awk '/^Swap:/ {print $2}')

    if [[ $current_swap -eq 0 ]]; then
        log "INFO" "Sem swap detectado. Configurando swapfile otimizada..."

        # Tamanho do swap baseado na RAM
        local swap_size_gb=2
        if [[ $RAM_GB -ge 16 ]]; then
            swap_size_gb=4
        elif [[ $RAM_GB -ge 8 ]]; then
            swap_size_gb=4
        elif [[ $RAM_GB -le 4 ]]; then
            swap_size_gb=$((RAM_GB * 2))  # Dobro da RAM se pouca RAM
        fi

        if ask_user "Criar swapfile de ${swap_size_gb}GB?" "n"; then
            sudo fallocate -l "${swap_size_gb}G" /swapfile
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile

            # Adicionar ao fstab se n√£o existir
            if ! grep -q "/swapfile" /etc/fstab; then
                echo "/swapfile none swap sw 0 0" | sudo tee -a /etc/fstab
            fi

            log "SUCCESS" "Swapfile de ${swap_size_gb}GB criada e ativada"
        fi
    else
        log "INFO" "Swap j√° configurado: $((current_swap / 1024))MB"
    fi
}

# =============================================================================
# LIMITES SEGUROS PARA DESENVOLVIMENTO
# =============================================================================

optimize_development_limits() {
    log "INFO" "Configurando limites seguros para desenvolvimento..."

    # Limites conservadores
    local nofile_soft=32768
    local nofile_hard=65536
    local nproc_limit=16384

    if [[ $RAM_GB -ge 16 ]]; then
        nofile_soft=65536
        nofile_hard=131072
        nproc_limit=32768
    elif [[ $RAM_GB -ge 8 ]]; then
        nofile_soft=49152
        nofile_hard=98304
        nproc_limit=24576
    fi

    sudo tee /etc/security/limits.d/99-dev-limits-safe.conf > /dev/null << EOF
# Limites seguros para desenvolvimento empresarial (${RAM_GB}GB RAM)
* soft nofile ${nofile_soft}
* hard nofile ${nofile_hard}
* soft nproc ${nproc_limit}
* hard nproc ${nproc_limit}
* soft memlock 131072
* hard memlock 131072
EOF

    # Configurar systemd
    sudo mkdir -p /etc/systemd/user.conf.d
    sudo tee /etc/systemd/user.conf.d/dev-limits-safe.conf > /dev/null << EOF
[Manager]
DefaultLimitNOFILE=${nofile_hard}
DefaultLimitNPROC=${nproc_limit}
DefaultLimitMEMLOCK=131072
EOF

    sudo mkdir -p /etc/systemd/system.conf.d
    sudo tee /etc/systemd/system.conf.d/dev-limits-safe.conf > /dev/null << EOF
[Manager]
DefaultLimitNOFILE=${nofile_hard}
DefaultLimitNPROC=${nproc_limit}
DefaultLimitMEMLOCK=131072
EOF

    log "SUCCESS" "Limites seguros configurados"
}

# =============================================================================
# DOCKER EMPRESARIAL (OPCIONAL)
# =============================================================================

configure_docker_enterprise() {
    if ! ask_user "Instalar e configurar Docker?" "n"; then
        log "INFO" "Docker skip - pode instalar depois se necess√°rio"
        return 0
    fi

    if ! command_exists docker; then
        log "INFO" "Instalando Docker..."
        sudo apt update -qq
        sudo apt install -y docker.io docker-compose
        sudo usermod -aG docker "$USER"
        sudo systemctl enable docker
    fi

    log "INFO" "Configurando Docker para ambiente empresarial..."
    sudo mkdir -p /etc/docker

    # PROTE√á√ÉO: Verificar se daemon.json j√° existe
    if [[ -f /etc/docker/daemon.json ]]; then
        log "WARNING" "Docker daemon.json j√° existe"
        log "INFO" "Configura√ß√£o atual:"
        cat /etc/docker/daemon.json | head -5
        echo "..."

        if ! ask_user "Sobrescrever configura√ß√£o Docker existente? (ser√° feito backup)" "n"; then
            log "INFO" "Mantendo configura√ß√£o Docker existente"
            return 0
        fi

        # Fazer backup
        local backup_file="/etc/docker/daemon.json.backup.$(date +%Y%m%d-%H%M%S)"
        sudo cp /etc/docker/daemon.json "$backup_file"
        log "SUCCESS" "Backup criado: $backup_file"
    fi

    sudo tee /etc/docker/daemon.json > /dev/null << EOF
{
  "storage-driver": "overlay2",
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "10m",
    "max-file": "5"
  },
  "default-ulimits": {
    "nofile": {
      "Name": "nofile",
      "Hard": $(( RAM_GB >= 16 ? 131072 : 65536 )),
      "Soft": $(( RAM_GB >= 16 ? 65536 : 32768 ))
    }
  },
  "features": {
    "buildkit": true
  },
  "experimental": false,
  "live-restore": true,
  "userland-proxy": false,
  "max-concurrent-downloads": 3,
  "max-concurrent-uploads": 3
}
EOF

    if systemctl is-active --quiet docker; then
        sudo systemctl restart docker
    fi

    log "SUCCESS" "Docker configurado para ambiente empresarial"
}

# =============================================================================
# üÜï INSTALA√á√ÉO DO ECOSSISTEMA ZSH COMPLETO
# =============================================================================

install_zsh_ecosystem() {
    log "INFO" "üöÄ Configurando ecossistema Zsh avan√ßado..."

    if ask_user "Instalar Zsh + Oh-My-Zsh + Zoxide + Direnv?" "y"; then
        # 1. INSTALAR ZSH
        install_zsh_shell

        # 2. INSTALAR OH-MY-ZSH
        install_oh_my_zsh

        # 3. INSTALAR ZOXIDE (cd inteligente)
        install_zoxide

        # 4. INSTALAR DIRENV (gest√£o de ambiente por diret√≥rio)
        install_direnv

        # 5. CONFIGURAR ZSH COMO PADR√ÉO
        configure_zsh_as_default

        # 6. CONFIGURA√á√ÉO AVAN√áADA ZSH
        configure_advanced_zsh

        log "SUCCESS" "üéâ Ecossistema Zsh completo instalado!"
        log "INFO" "üìù Ser√° necess√°rio fazer logout/login para ativar o Zsh"
    fi
}

install_zsh_shell() {
    if ! command -v zsh >/dev/null 2>&1; then
        log "INFO" "Instalando Zsh..."
        sudo apt install -y zsh zsh-autosuggestions zsh-syntax-highlighting
    else
        log "SUCCESS" "Zsh j√° instalado: $(zsh --version)"
    fi
}

install_oh_my_zsh() {
    if [[ ! -d "$HOME/.oh-my-zsh" ]]; then
        log "INFO" "Instalando Oh-My-Zsh..."

        # Download e instalar Oh-My-Zsh sem alterar shell ainda
        sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended

        # Instalar plugins √∫teis
        install_zsh_plugins

        log "SUCCESS" "Oh-My-Zsh instalado com plugins"
    else
        log "SUCCESS" "Oh-My-Zsh j√° instalado"
    fi
}

install_zsh_plugins() {
    local ZSH_CUSTOM="$HOME/.oh-my-zsh/custom"

    log "INFO" "Instalando plugins Zsh personalizados..."

    # Plugin para autosuggestions (se n√£o veio com o pacote apt)
    if [[ ! -d "$ZSH_CUSTOM/plugins/zsh-autosuggestions" ]]; then
        log "INFO" "Instalando zsh-autosuggestions..."
        if git clone https://github.com/zsh-users/zsh-autosuggestions "$ZSH_CUSTOM/plugins/zsh-autosuggestions"; then
            log "SUCCESS" "zsh-autosuggestions instalado"
        else
            log "WARNING" "Falha ao instalar zsh-autosuggestions"
        fi
    fi

    # Plugin para syntax highlighting (se n√£o veio com o pacote apt)
    if [[ ! -d "$ZSH_CUSTOM/plugins/zsh-syntax-highlighting" ]]; then
        log "INFO" "Instalando zsh-syntax-highlighting..."
        if git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "$ZSH_CUSTOM/plugins/zsh-syntax-highlighting"; then
            log "SUCCESS" "zsh-syntax-highlighting instalado"
        else
            log "WARNING" "Falha ao instalar zsh-syntax-highlighting"
        fi
    fi

    # Plugin para fzf-tab (melhor completion)
    if [[ ! -d "$ZSH_CUSTOM/plugins/fzf-tab" ]]; then
        log "INFO" "Instalando fzf-tab..."
        if git clone https://github.com/Aloxaf/fzf-tab "$ZSH_CUSTOM/plugins/fzf-tab"; then
            log "SUCCESS" "fzf-tab instalado"
        else
            log "WARNING" "Falha ao instalar fzf-tab - pode instalar depois manualmente"
        fi
    fi

    # Verificar quais foram instalados com sucesso
    local installed_plugins=()
    [[ -d "$ZSH_CUSTOM/plugins/zsh-autosuggestions" ]] && installed_plugins+=("autosuggestions")
    [[ -d "$ZSH_CUSTOM/plugins/zsh-syntax-highlighting" ]] && installed_plugins+=("syntax-highlighting")
    [[ -d "$ZSH_CUSTOM/plugins/fzf-tab" ]] && installed_plugins+=("fzf-tab")

    if [[ ${#installed_plugins[@]} -gt 0 ]]; then
        log "SUCCESS" "Plugins Zsh instalados: ${installed_plugins[*]}"
    else
        log "WARNING" "Nenhum plugin personalizado foi instalado"
    fi
}

install_zoxide() {
    if ! command -v zoxide >/dev/null 2>&1; then
        log "INFO" "Instalando zoxide (cd inteligente)..."

        # Tentar via apt primeiro (Ubuntu 22.04+)
        if ! sudo apt install -y zoxide 2>/dev/null; then
            # Fallback: instala√ß√£o via curl
            curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash

            # Adicionar ao PATH se necess√°rio
            if [[ -f "$HOME/.local/bin/zoxide" ]]; then
                export PATH="$HOME/.local/bin:$PATH"
            fi
        fi

        log "SUCCESS" "Zoxide instalado"
    else
        log "SUCCESS" "Zoxide j√° instalado: $(zoxide --version)"
    fi
}

install_direnv() {
    if ! command -v direnv >/dev/null 2>&1; then
        log "INFO" "Instalando direnv (gest√£o de ambiente por diret√≥rio)..."
        sudo apt install -y direnv
        log "SUCCESS" "Direnv instalado"
    else
        log "SUCCESS" "Direnv j√° instalado: $(direnv --version)"
    fi
}

configure_zsh_as_default() {
    local current_shell=$(getent passwd "$USER" | cut -d: -f7)

    if [[ "$current_shell" != "/usr/bin/zsh" && "$current_shell" != "/bin/zsh" ]]; then
        log "INFO" "Configurando Zsh como shell padr√£o..."

        # Verificar se zsh est√° em /etc/shells
        if ! grep -q "$(which zsh)" /etc/shells; then
            which zsh | sudo tee -a /etc/shells
        fi

        # Alterar shell padr√£o
        sudo chsh -s "$(which zsh)" "$USER"

        log "SUCCESS" "Zsh configurado como shell padr√£o"
        log "WARNING" "‚ö†Ô∏è Ser√° necess√°rio logout/login para ativar"
    else
        log "SUCCESS" "Zsh j√° √© o shell padr√£o"
    fi
}

configure_advanced_zsh() {
    log "INFO" "Configurando Zsh avan√ßado para desenvolvimento..."

    # Criar configura√ß√£o .zshrc otimizada
    cat > ~/.zshrc << 'EOF'
# ============================================================================
# ZSH CONFIGURA√á√ÉO PARA DESENVOLVIMENTO - OTIMIZADA PARA PRODUTIVIDADE
# ============================================================================

# Path para Oh-My-Zsh
export ZSH="$HOME/.oh-my-zsh"

# Tema (pode ser alterado)
ZSH_THEME="robbyrussell"  # R√°pido e limpo
# Alternativas: "agnoster", "powerlevel10k/powerlevel10k", "spaceship"

# Plugins essenciais para desenvolvimento
plugins=(
    git                    # Git aliases e info
    docker                 # Docker completion
    docker-compose         # Docker-compose completion
    node                   # Node.js completion
    npm                    # npm completion
    yarn                   # Yarn completion
    python                 # Python completion
    pip                    # pip completion
    systemd                # systemctl completion
    sudo                   # sudo completion
    history-substring-search  # Busca no hist√≥rico
    zsh-autosuggestions    # Sugest√µes baseadas no hist√≥rico
    zsh-syntax-highlighting # Syntax highlighting
    fzf-tab               # Melhor completion com fzf
    direnv                # Direnv hook
)

# Carregar Oh-My-Zsh
source $ZSH/oh-my-zsh.sh

# ============================================================================
# CONFIGURA√á√ïES DE PRODUTIVIDADE
# ============================================================================

# Hist√≥rico melhorado
HISTSIZE=50000
SAVEHIST=50000
HISTFILE=~/.zsh_history
setopt SHARE_HISTORY          # Compartilhar hist√≥rico entre sess√µes
setopt HIST_VERIFY           # Verificar comando do hist√≥rico antes de executar
setopt HIST_IGNORE_DUPS      # Ignorar duplicatas consecutivas
setopt HIST_IGNORE_ALL_DUPS  # Ignorar todas as duplicatas
setopt HIST_SAVE_NO_DUPS     # N√£o salvar duplicatas
setopt HIST_IGNORE_SPACE     # Ignorar comandos que come√ßam com espa√ßo
setopt HIST_REDUCE_BLANKS    # Remover espa√ßos desnecess√°rios

# Completion melhorado
setopt AUTO_MENU             # Mostrar menu completion automaticamente
setopt COMPLETE_IN_WORD      # Completion no meio da palavra
setopt ALWAYS_TO_END         # Mover cursor para o fim ap√≥s completion

# Case-insensitive completion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'

# ============================================================================
# INTEGRA√á√ïES DE FERRAMENTAS
# ============================================================================

# Zoxide (cd inteligente) - DEVE vir DEPOIS do Oh-My-Zsh
if command -v zoxide >/dev/null 2>&1; then
    eval "$(zoxide init zsh)"
    # Alias para compatibilidade
    alias cd='z'
fi

# Direnv (gest√£o de ambiente por diret√≥rio)
if command -v direnv >/dev/null 2>&1; then
    eval "$(direnv hook zsh)"
fi

# FZF key bindings (se instalado via git)
if [[ -f ~/.fzf.zsh ]]; then
    source ~/.fzf.zsh
fi

# ============================================================================
# ALIASES INTELIGENTES PARA DESENVOLVIMENTO
# ============================================================================

# Navega√ß√£o melhorada
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Fun√ß√£o para detectar qual comando usar (eza ou exa)
setup_exa_aliases() {
    if command -v eza >/dev/null 2>&1; then
        alias ls='eza --icons'
        alias ll='eza -la --icons --git'
        alias tree='eza --tree --icons'
    elif command -v exa >/dev/null 2>&1; then
        alias ls='exa --icons'
        alias ll='exa -la --icons --git'
        alias tree='exa --tree --icons'
    fi
}

# Chamar a fun√ß√£o
setup_exa_aliases

# Git aliases √∫teis
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git log --oneline'
alias gb='git branch'
alias gco='git checkout'

# Docker aliases
alias d='docker'
alias dc='docker-compose'
alias dps='docker ps'
alias di='docker images'

# Desenvolvimento
alias serve='python3 -m http.server 8000'
alias nodemon='npx nodemon'
alias ni='npm install'
alias nr='npm run'
alias ys='yarn start'
alias yb='yarn build'

# Sistema
alias update='sudo apt update && sudo apt upgrade'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'

# Ferramentas modernas (se instaladas)
if command -v bat >/dev/null 2>&1; then
    alias cat='bat --paging=never'
    alias less='bat'
fi

if command -v fd >/dev/null 2>&1; then
    alias find='fd'
fi

if command -v rg >/dev/null 2>&1; then
    alias grep='rg'
fi

# ============================================================================
# FUN√á√ïES √öTEIS PARA DESENVOLVIMENTO
# ============================================================================

# Criar projeto Node.js rapidamente
nodesetup() {
    local project_name="${1:-my-project}"
    mkdir "$project_name" && cd "$project_name"
    npm init -y
    echo "node_modules/" > .gitignore
    echo "# $project_name" > README.md
    git init
    echo "‚úÖ Projeto Node.js '$project_name' criado!"
}

# Limpeza inteligente de node_modules
cleannode() {
    find . -name "node_modules" -type d -prune -print0 | du -csh --files0-from=-
    echo "Remover todos os node_modules? (y/N)"
    read -r response
    if [[ "$response" =~ ^[Yy] ]]; then
        find . -name "node_modules" -type d -prune -exec rm -rf {} +
        echo "‚úÖ node_modules removidos!"
    fi
}

# Ver ocupa√ß√£o de diret√≥rios
diskusage() {
    if command -v ncdu >/dev/null 2>&1; then
        ncdu "${1:-.}"
    else
        du -sh "${1:-.}"/* | sort -hr
    fi
}

# Procurar projetos rapidamente
findproject() {
    local base_dirs=("$HOME/projects" "$HOME/dev" "$HOME/workspace" "$HOME/code" "$HOME")

    for dir in "${base_dirs[@]}"; do
        if [[ -d "$dir" ]]; then
            find "$dir" -maxdepth 3 -name "package.json" -o -name "Cargo.toml" -o -name "requirements.txt" -o -name "pom.xml" 2>/dev/null | head -20
        fi
    done
}

# Testar APIs rapidamente
testapi() {
    local url="$1"
    local method="${2:-GET}"

    if command -v http >/dev/null 2>&1; then
        http "$method" "$url"
    else
        curl -X "$method" "$url"
    fi
}

# ============================================================================
# CONFIGURA√á√ïES DE AMBIENTE
# ============================================================================

# Adicionar paths √∫teis
export PATH="$HOME/.local/bin:$HOME/bin:$PATH"

# Node.js
export NODE_ENV=development
export NODE_OPTIONS="--max-old-space-size=4096"

# Python
export PYTHONDONTWRITEBYTECODE=1
export PYTHONUNBUFFERED=1

# Editor padr√£o
export EDITOR=vim
export VISUAL=vim

# ============================================================================
# PROMPT PERSONALIZADO (se n√£o usar tema)
# ============================================================================

# Descomenta se quiser prompt personalizado em vez do tema
# autoload -Uz vcs_info
# setopt prompt_subst
# zstyle ':vcs_info:git:*' formats ' (%b)'
#
# precmd() { vcs_info }
#
# PROMPT='%F{cyan}%n@%m%f:%F{blue}%~%f%F{red}${vcs_info_msg_0_}%f$ '

# ============================================================================
# ALIASES CUSTOM
# ============================================================================

# vpn airc
alias vpn="sudo openconnect --protocol=gp fw.airc.pt"
EOF

    # Criar arquivo de configura√ß√£o para direnv
    cat > ~/.direnvrc << 'EOF'
# Configura√ß√µes para direnv

# Usar layout automaticamente baseado no arquivo .envrc
use_flake() {
    watch_file flake.nix
    watch_file flake.lock
    eval "$(nix print-dev-env)"
}

# Fun√ß√£o para projetos Node.js
layout_node() {
    local node_version="${1:-16}"
    echo "Using Node.js version $node_version"
    export PATH="$PWD/node_modules/.bin:$PATH"
}

# Fun√ß√£o para projetos Python
layout_python() {
    local python_version="${1:-3.9}"
    local venv_path=".venv"

    if [[ ! -d "$venv_path" ]]; then
        echo "Creating Python virtual environment..."
        python3 -m venv "$venv_path"
    fi

    source "$venv_path/bin/activate"
    export VIRTUAL_ENV="$PWD/$venv_path"
}
EOF

    log "SUCCESS" "Zsh configurado com configura√ß√µes avan√ßadas para desenvolvimento"
}

# =============================================================================
# VERIFICAR E INSTALAR FERRAMENTAS DE DESENVOLVIMENTO ESSENCIAIS
# =============================================================================

install_development_essentials() {
    log "INFO" "Verificando e instalando ferramentas essenciais de desenvolvimento..."

    # Atualizar reposit√≥rios
    sudo apt update -qq

    # DEPEND√äNCIAS DO PR√ìPRIO SCRIPT (sempre necess√°rias)
    local script_dependencies=(
        "bc"                              # C√°lculos matem√°ticos no script
        "ss"                              # Verificar portas (iproute2)
        "watch"                           # Comando watch para monitoriza√ß√£o
        "notify-send" "libnotify-bin"     # Notifica√ß√µes desktop
    )

    # Ferramentas b√°sicas sempre necess√°rias
    local essential_tools=(
        "htop" "iotop"                     # Monitoramento
        "git" "build-essential"            # Desenvolvimento base
        "curl" "wget" "jq"                 # Network tools
        "vim" "tree" "zip" "unzip"         # Utilit√°rios b√°sicos
        "software-properties-common"       # Para PPAs
        "apt-transport-https"              # Para reposit√≥rios HTTPS
        "ca-certificates"                  # Certificados
        "gnupg" "lsb-release"             # Seguran√ßa
        "less" "grep" "ripgrep"           # Para trabalhar com logs
        "multitail"                       # Ver m√∫ltiplos logs
        "openssh-client"                  # SSH client
        "rsync"                           # Sincroniza√ß√£o de arquivos
        "python3" "python3-pip"           # Python b√°sico
        "python3-venv"                    # Virtual environments Python
        "shellcheck"                      # Linting de shell scripts
    )

    # Instalar depend√™ncias do script primeiro
    log "INFO" "Instalando depend√™ncias do script..."
    #sudo apt install -y "${script_dependencies[@]}"

    # Instalar ferramentas essenciais
    log "INFO" "Instalando ferramentas de desenvolvimento..."
    sudo apt install -y "${essential_tools[@]}"

    log "SUCCESS" "Ferramentas b√°sicas e depend√™ncias instaladas"

    # FERRAMENTAS MODERNAS OPCIONAIS
    install_modern_dev_tools

    # VERIFICAR E INSTALAR NODE.JS
    check_and_install_nodejs

    # VERIFICAR E INSTALAR YARN (se Node.js existe)
    check_and_install_yarn

    # VERIFICAR FERRAMENTAS DE BUILD ADICIONAIS
    check_and_install_build_tools

    # SNAP B√ÅSICO (se n√£o existir)
    check_and_install_snap

    # üÜï INSTALAR ECOSSISTEMA ZSH
    install_zsh_ecosystem

    log "SUCCESS" "Ambiente de desenvolvimento verificado e configurado"
}

install_modern_dev_tools() {
    log "INFO" "Verificando e instalando ferramentas modernas de desenvolvimento..."

    if ask_user "Instalar ferramentas modernas essenciais?" "y"; then
        log "INFO" "Instalando ferramentas..."

        # Lista completa de ferramentas para tentar
        local all_tools=(
            "fzf:Fuzzy finder"
            "fd-find:Find melhorado"
            "bat:Cat com syntax highlighting"
            "ripgrep:Grep melhorado"
            "ncdu:Disk usage analyzer"
            "tldr:Man pages simplificado"
            "httpie:API testing tool"
            "jq:JSON processor"
            "meld:Visual diff tool"
            "lsof:List open files"
            "multitail:Multiple log files"
            "shellcheck:Shell script linting"
            "tree:Directory tree"
            "htop:System monitor melhorado"
            "exa:ls melhorado com cores"
            "micro:Editor de texto moderno"
            "tmux:Terminal multiplexer"
            "watch:Executar comandos repetidamente"
        )

        # Arrays de controle
        local installed=()
        local not_found=()
        local install_failed=()
        local already_installed=()

        echo ""
        log "INFO" "üìã VERIFICANDO E INSTALANDO FERRAMENTAS..."
        echo ""

        for tool_info in "${all_tools[@]}"; do
            local tool="${tool_info%%:*}"
            local description="${tool_info##*:}"

            printf "%-15s %-30s " "$tool" "($description)"

            # Verificar se j√° est√° instalado
            if command -v "$tool" >/dev/null 2>&1 || command -v "${tool//-/_}" >/dev/null 2>&1; then
                echo -e "${GREEN}‚úÖ J√Å INSTALADO${NC}"
                already_installed+=("$tool")
                continue
            fi

            # Verificar se pacote existe nos reposit√≥rios
            if ! apt-cache show "$tool" >/dev/null 2>&1; then
                echo -e "${YELLOW}‚ùå N√ÉO ENCONTRADO${NC}"
                not_found+=("$tool")
                continue
            fi

            # Tentar instalar
            if sudo apt install -y "$tool" >/dev/null 2>&1; then
                echo -e "${GREEN}‚úÖ INSTALADO${NC}"
                installed+=("$tool")
            else
                echo -e "${RED}‚ùå FALHA INSTALA√á√ÉO${NC}"
                install_failed+=("$tool")
            fi
        done

        echo ""
        log "INFO" "üîß INSTALA√á√ïES ESPECIAIS (m√©todos alternativos)..."
        echo ""

        # fzf tratamento especial (via git se necess√°rio)
        if ! command -v fzf >/dev/null 2>&1 && [[ " ${installed[*]} " != *" fzf "* ]]; then
            printf "%-15s %-30s " "fzf" "(via git clone)"
            if git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf >/dev/null 2>&1; then
                if ~/.fzf/install --key-bindings --completion --no-update-rc >/dev/null 2>&1; then
                    echo -e "${GREEN}‚úÖ INSTALADO (GIT)${NC}"
                    installed+=("fzf (git)")
                else
                    echo -e "${RED}‚ùå FALHA CONFIG${NC}"
                    install_failed+=("fzf (config)")
                fi
            else
                echo -e "${RED}‚ùå FALHA DOWNLOAD${NC}"
                install_failed+=("fzf (download)")
            fi
        fi

        # tldr tratamento especial (via pip3 se apt falhou)
        if ! command -v tldr >/dev/null 2>&1 && [[ " ${installed[*]} " != *" tldr "* ]]; then
            printf "%-15s %-30s " "tldr" "(via pip3)"
            if command -v pip3 >/dev/null 2>&1; then
                if pip3 install --user tldr >/dev/null 2>&1; then
                    echo -e "${GREEN}‚úÖ INSTALADO (PIP3)${NC}"
                    installed+=("tldr (pip3)")
                else
                    echo -e "${RED}‚ùå FALHA PIP3${NC}"
                    install_failed+=("tldr (pip3)")
                fi
            else
                echo -e "${YELLOW}‚ùå PIP3 N/DISPON√çVEL${NC}"
                not_found+=("tldr (sem pip3)")
            fi
        fi

        # exa/eza tratamento especial (eza √© o fork moderno)
        if ! command -v exa >/dev/null 2>&1 && ! command -v eza >/dev/null 2>&1 && [[ " ${installed[*]} " != *" exa "* ]]; then
            printf "%-15s %-30s " "eza/exa" "(ls melhorado)"

            # Sequ√™ncia que funcionou: eza apt ‚Üí cargo eza ‚Üí cargo exa
            if sudo apt install -y eza >/dev/null 2>&1; then
                echo -e "${GREEN}‚úÖ INSTALADO (EZA-APT)${NC}"
                installed+=("eza (apt)")
            elif command -v cargo >/dev/null 2>&1 && cargo install eza >/dev/null 2>&1; then
                echo -e "${GREEN}‚úÖ INSTALADO (EZA-CARGO)${NC}"
                installed+=("eza (cargo)")
            elif command -v cargo >/dev/null 2>&1 && cargo install exa >/dev/null 2>&1; then
                echo -e "${GREEN}‚úÖ INSTALADO (EXA-CARGO)${NC}"
                installed+=("exa (cargo)")
            elif command -v snap >/dev/null 2>&1 && sudo snap install exa >/dev/null 2>&1; then
                echo -e "${GREEN}‚úÖ INSTALADO (EXA-SNAP)${NC}"
                installed+=("exa (snap)")
            else
                echo -e "${RED}‚ùå TODOS FALHARAM${NC}"
                install_failed+=("exa/eza (todos m√©todos)")
            fi
        fi

        # micro tratamento especial (snap fallback)
        if ! command -v micro >/dev/null 2>&1 && [[ " ${installed[*]} " != *" micro "* ]]; then
            printf "%-15s %-30s " "micro" "(via snap)"
            if command -v snap >/dev/null 2>&1; then
                if sudo snap install micro --classic >/dev/null 2>&1; then
                    echo -e "${GREEN}‚úÖ INSTALADO (SNAP)${NC}"
                    installed+=("micro (snap)")
                else
                    echo -e "${RED}‚ùå FALHA SNAP${NC}"
                    install_failed+=("micro (snap)")
                fi
            else
                echo -e "${YELLOW}‚ùå SNAP N/DISPON√çVEL${NC}"
                not_found+=("micro (sem snap)")
            fi
        fi

        # watch verifica√ß√£o especial (geralmente j√° existe)
        if ! command -v watch >/dev/null 2>&1 && [[ " ${installed[*]} " != *" watch "* ]]; then
            printf "%-15s %-30s " "watch" "(via procps)"
            if sudo apt install -y procps >/dev/null 2>&1; then
                if command -v watch >/dev/null 2>&1; then
                    echo -e "${GREEN}‚úÖ DISPON√çVEL${NC}"
                    installed+=("watch (procps)")
                else
                    echo -e "${YELLOW}‚ùå AINDA N/DISPON√çVEL${NC}"
                    install_failed+=("watch")
                fi
            else
                echo -e "${RED}‚ùå FALHA PROCPS${NC}"
                install_failed+=("watch (procps)")
            fi
        fi

        echo ""
        log "SUCCESS" "üìä RELAT√ìRIO FINAL DE INSTALA√á√ÉO:"
        echo ""

        # Mostrar resultados organizados
        if [[ ${#already_installed[@]} -gt 0 ]]; then
            log "INFO" "üîµ J√Å INSTALADOS (${#already_installed[@]}):"
            for tool in "${already_installed[@]}"; do
                echo "   ‚úÖ $tool"
            done
            echo ""
        fi

        if [[ ${#installed[@]} -gt 0 ]]; then
            log "SUCCESS" "üü¢ INSTALADOS AGORA (${#installed[@]}):"
            for tool in "${installed[@]}"; do
                echo "   ‚úÖ $tool"
            done
            echo ""
        fi

        if [[ ${#not_found[@]} -gt 0 ]]; then
            log "WARNING" "üü° N√ÉO ENCONTRADOS/DISPON√çVEIS (${#not_found[@]}):"
            for tool in "${not_found[@]}"; do
                echo "   ‚ùå $tool"
            done
            echo ""
        fi

        if [[ ${#install_failed[@]} -gt 0 ]]; then
            log "ERROR" "üî¥ FALHARAM NA INSTALA√á√ÉO (${#install_failed[@]}):"
            for tool in "${install_failed[@]}"; do
                echo "   ‚ùå $tool"
            done
            echo ""
        fi

        # Resumo final
        local total=${#all_tools[@]}
        local success=$((${#already_installed[@]} + ${#installed[@]}))
        local failed=$((${#not_found[@]} + ${#install_failed[@]}))

        echo "üéØ RESUMO: $success/$total ferramentas dispon√≠veis ($failed falharam)"
        echo ""

        # Dicas de uso para ferramentas instaladas
        if [[ ${#installed[@]} -gt 0 ]]; then
            log "INFO" "üí° DICAS DE USO R√ÅPIDO:"
            for tool in "${installed[@]}"; do
                case "${tool%% *}" in
                    "fzf") echo "   ‚Ä¢ fzf: Ctrl+R (hist√≥rico), Ctrl+T (arquivos)" ;;
                    "bat") echo "   ‚Ä¢ bat: bat arquivo.txt (cat com cores)" ;;
                    "exa") echo "   ‚Ä¢ exa: exa --icons --git (ls melhorado)" ;;
                    "ripgrep") echo "   ‚Ä¢ ripgrep: rg 'texto' (grep r√°pido)" ;;
                    "tldr") echo "   ‚Ä¢ tldr: tldr comando (man pages simples)" ;;
                    "micro") echo "   ‚Ä¢ micro: micro arquivo.txt (editor moderno)" ;;
                    "tmux") echo "   ‚Ä¢ tmux: tmux (terminal m√∫ltiplo)" ;;
                    "htop") echo "   ‚Ä¢ htop: htop (monitor de sistema)" ;;
                esac
            done
            echo ""
        fi
    fi

    # Instalar GitHub CLI
    install_github_cli

    # Instalar lazygit
    install_lazygit

    # Instalar glow
    install_glow
}

install_github_cli() {
    if ! command -v gh >/dev/null 2>&1; then
        if ask_user "Instalar GitHub CLI?" "n"; then
            log "INFO" "Instalando GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update -qq
            sudo apt install -y gh
            log "SUCCESS" "GitHub CLI instalado"
        fi
    else
        log "SUCCESS" "GitHub CLI j√° instalado: $(gh --version | head -1)"
        # N√£o reconfigurar
    fi
}

install_lazygit() {
    if ! command -v lazygit >/dev/null 2>&1; then
        if ask_user "Instalar lazygit (Git visual TUI)?" "y"; then
            log "INFO" "Instalando lazygit..."
            local latest_version=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
            if [[ -n "$latest_version" ]]; then
                curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${latest_version}_Linux_x86_64.tar.gz"
                tar xf lazygit.tar.gz lazygit
                sudo install lazygit /usr/local/bin
                rm -f lazygit.tar.gz lazygit
                log "SUCCESS" "Lazygit instalado: $latest_version"
            fi
        fi
    else
        log "SUCCESS" "Lazygit j√° instalado: $(lazygit --version | head -1)"
    fi
}

install_glow() {
    if ! command -v glow >/dev/null 2>&1; then
        if ask_user "Instalar glow (markdown viewer)?" "y"; then
            log "INFO" "Instalando glow..."

            # PROBLEMA 1: grep -Po pode n√£o existir em todos sistemas
            # SOLU√á√ÉO: Usar m√©todo mais compat√≠vel
            local latest_version
            latest_version=$(curl -s "https://api.github.com/repos/charmbracelet/glow/releases/latest" | \
                           grep '"tag_name"' | \
                           sed 's/.*"tag_name": "v\([^"]*\)".*/\1/' | \
                           head -1)

            if [[ -n "$latest_version" ]]; then
                log "INFO" "Vers√£o detectada: $latest_version"

                # PROBLEMA 2: Download pode falhar
                # SOLU√á√ÉO: Verificar se download foi bem sucedido
                local deb_file="glow_${latest_version}_linux_amd64.deb"
                local download_url="https://github.com/charmbracelet/glow/releases/latest/download/$deb_file"

                if curl -Lo "$deb_file" "$download_url" 2>/dev/null; then
                    # PROBLEMA 3: Verificar se arquivo foi baixado corretamente
                    if [[ -f "$deb_file" && -s "$deb_file" ]]; then
                        # PROBLEMA 4: dpkg pode falhar por depend√™ncias
                        if sudo dpkg -i "$deb_file" 2>/dev/null; then
                            log "SUCCESS" "Glow instalado: $latest_version"
                        else
                            log "WARNING" "Falha no dpkg, tentando corrigir depend√™ncias..."
                            sudo apt-get install -f -y >/dev/null 2>&1
                            if sudo dpkg -i "$deb_file" >/dev/null 2>&1; then
                                log "SUCCESS" "Glow instalado ap√≥s corrigir depend√™ncias"
                            else
                                log "ERROR" "Falha na instala√ß√£o do glow via .deb"
                                # FALLBACK: Tentar via snap ou desistir
                                if command -v snap >/dev/null 2>&1; then
                                    log "INFO" "Tentando instalar via snap..."
                                    if sudo snap install glow >/dev/null 2>&1; then
                                        log "SUCCESS" "Glow instalado via snap"
                                    else
                                        log "ERROR" "Falha na instala√ß√£o do glow"
                                    fi
                                fi
                            fi
                        fi
                    else
                        log "ERROR" "Download do glow falhou ou arquivo corrompido"
                    fi
                    # PROBLEMA 5: Limpar sempre o arquivo tempor√°rio
                    rm -f "$deb_file"
                else
                    log "ERROR" "Falha no download do glow"
                    # FALLBACK: Tentar m√©todo alternativo
                    if command -v snap >/dev/null 2>&1; then
                        log "INFO" "Tentando instalar via snap como fallback..."
                        if sudo snap install glow >/dev/null 2>&1; then
                            log "SUCCESS" "Glow instalado via snap"
                        fi
                    fi
                fi
            else
                log "ERROR" "N√£o foi poss√≠vel detectar vers√£o do glow"
                # FALLBACK: Tentar snap
                if command -v snap >/dev/null 2>&1; then
                    log "INFO" "Tentando instalar via snap..."
                    if sudo snap install glow >/dev/null 2>&1; then
                        log "SUCCESS" "Glow instalado via snap"
                    fi
                fi
            fi
        fi
    else
        log "SUCCESS" "Glow j√° instalado: $(glow --version)"
    fi
}

install_tldr() {
    if ! command -v tldr >/dev/null 2>&1; then
        if ask_user "Instalar tldr (man pages simplificado)?" "y"; then
            log "INFO" "Instalando tldr..."

            # Tentar via apt primeiro
            if sudo apt install -y tldr >/dev/null 2>&1; then
                log "SUCCESS" "tldr instalado via apt"
            elif command -v pip3 >/dev/null 2>&1; then
                # Fallback para pip se apt falhar
                log "INFO" "Tentando instalar tldr via pip3..."
                if pip3 install --user tldr >/dev/null 2>&1; then
                    log "SUCCESS" "tldr instalado via pip3"
                    log "INFO" "üí° Use: tldr <command> para ver exemplos r√°pidos"
                else
                    log "ERROR" "Falha na instala√ß√£o do tldr"
                fi
            else
                log "ERROR" "tldr n√£o dispon√≠vel via apt nem pip3"
            fi
        fi
    else
        log "SUCCESS" "tldr j√° instalado: $(tldr --version 2>/dev/null || echo 'dispon√≠vel')"
    fi
}

install_htop() {
    if ! command -v htop >/dev/null 2>&1; then
        if ask_user "Instalar htop (monitor de sistema melhorado)?" "y"; then
            log "INFO" "Instalando htop..."
            if sudo apt install -y htop >/dev/null 2>&1; then
                log "SUCCESS" "htop instalado"
                log "INFO" "üí° Use: htop para ver processos com interface melhorada"
            else
                log "ERROR" "Falha na instala√ß√£o do htop"
            fi
        fi
    else
        log "SUCCESS" "htop j√° instalado"
    fi
}

install_exa() {
    # Verificar se exa OU eza j√° est√£o instalados
    if ! command -v exa >/dev/null 2>&1 && ! command -v eza >/dev/null 2>&1; then
        if ask_user "Instalar exa/eza (ls melhorado com cores)?" "y"; then
            log "INFO" "Instalando exa/eza..."

            # SEQU√äNCIA QUE FUNCIONOU: eza ‚Üí cargo eza ‚Üí cargo exa
            if sudo apt install -y eza >/dev/null 2>&1; then
                log "SUCCESS" "eza instalado via apt (fork moderno do exa)"
                log "INFO" "üí° Use: eza --icons --git para listagem melhorada"
            elif command -v cargo >/dev/null 2>&1; then
                log "INFO" "Tentando instalar eza via cargo..."
                if cargo install eza >/dev/null 2>&1; then
                    log "SUCCESS" "eza instalado via cargo"
                    log "INFO" "üí° Use: eza --icons --git para listagem melhorada"
                else
                    log "INFO" "Tentando instalar exa (original) via cargo..."
                    if cargo install exa >/dev/null 2>&1; then
                        log "SUCCESS" "exa instalado via cargo"
                        log "INFO" "üí° Use: exa --icons --git para listagem melhorada"
                    else
                        log "ERROR" "Falha na instala√ß√£o do exa/eza via cargo"
                    fi
                fi
            elif command -v snap >/dev/null 2>&1; then
                # Fallback para snap (exa original)
                log "INFO" "Tentando instalar exa via snap..."
                if sudo snap install exa >/dev/null 2>&1; then
                    log "SUCCESS" "exa instalado via snap"
                    log "INFO" "üí° Use: exa --icons --git para listagem melhorada"
                else
                    log "ERROR" "Falha na instala√ß√£o do exa via snap"
                fi
            else
                log "WARNING" "exa/eza n√£o dispon√≠vel - requer apt eza, cargo ou snap"
            fi
        fi
    else
        # Verificar qual est√° instalado e mostrar vers√£o
        if command -v eza >/dev/null 2>&1; then
            log "SUCCESS" "eza j√° instalado: $(eza --version | head -1)"
        elif command -v exa >/dev/null 2>&1; then
            log "SUCCESS" "exa j√° instalado: $(exa --version | head -1)"
        fi
    fi
}

install_micro() {
    if ! command -v micro >/dev/null 2>&1; then
        if ask_user "Instalar micro (editor de texto moderno)?" "y"; then
            log "INFO" "Instalando micro..."

            # Tentar via apt primeiro
            if sudo apt install -y micro >/dev/null 2>&1; then
                log "SUCCESS" "micro instalado via apt"
                log "INFO" "üí° Use: micro <file> para editar com interface moderna"
            elif command -v snap >/dev/null 2>&1; then
                # Fallback para snap
                log "INFO" "Tentando instalar micro via snap..."
                if sudo snap install micro --classic >/dev/null 2>&1; then
                    log "SUCCESS" "micro instalado via snap"
                else
                    log "ERROR" "Falha na instala√ß√£o do micro via snap"
                fi
            else
                # Fallback para download direto
                log "INFO" "Tentando instalar micro via download direto..."
                if curl -L https://getmic.ro | bash >/dev/null 2>&1; then
                    # Mover para /usr/local/bin se foi instalado no diret√≥rio atual
                    if [[ -f ./micro ]]; then
                        sudo mv ./micro /usr/local/bin/
                        sudo chmod +x /usr/local/bin/micro
                        log "SUCCESS" "micro instalado via download direto"
                    fi
                else
                    log "ERROR" "Falha na instala√ß√£o do micro"
                fi
            fi
        fi
    else
        log "SUCCESS" "micro j√° instalado: $(micro --version | head -1)"
    fi
}

install_tmux() {
    if ! command -v tmux >/dev/null 2>&1; then
        if ask_user "Instalar tmux (terminal multiplexer)?" "y"; then
            log "INFO" "Instalando tmux..."
            if sudo apt install -y tmux >/dev/null 2>&1; then
                log "SUCCESS" "tmux instalado"
                log "INFO" "üí° Use: tmux para sess√µes de terminal m√∫ltiplas"
                log "INFO" "üí° Atalhos: Ctrl+b ent√£o c (nova janela), d (detach)"
            else
                log "ERROR" "Falha na instala√ß√£o do tmux"
            fi
        fi
    else
        log "SUCCESS" "tmux j√° instalado: $(tmux -V)"
    fi
}

install_watch() {
    if ! command -v watch >/dev/null 2>&1; then
        if ask_user "Instalar watch (executar comandos repetidamente)?" "y"; then
            log "INFO" "Instalando watch..."
            # watch geralmente vem no procps, mas tentar instalar separadamente
            if sudo apt install -y procps >/dev/null 2>&1; then
                if command -v watch >/dev/null 2>&1; then
                    log "SUCCESS" "watch dispon√≠vel (parte do procps)"
                    log "INFO" "üí° Use: watch -n 2 'command' para repetir a cada 2s"
                else
                    log "WARNING" "watch pode j√° estar dispon√≠vel no sistema"
                fi
            else
                log "WARNING" "procps/watch pode j√° estar no sistema"
            fi
        fi
    else
        log "SUCCESS" "watch j√° instalado"
    fi
}

check_and_install_nodejs() {
    if command -v node >/dev/null 2>&1; then
        local node_version=$(node --version)
        log "SUCCESS" "Node.js j√° instalado: $node_version"

        # Verificar se √© vers√£o muito antiga
        local major_version=$(echo "$node_version" | sed 's/v\([0-9]*\).*/\1/')
        if [[ $major_version -lt 18 ]]; then
            log "WARNING" "Node.js vers√£o antiga detectada: $node_version"
            if ask_user "Instalar Node.js LTS mais recente via NodeSource?" "y"; then
                install_nodejs_nodesource
            fi
        fi
    else
        log "WARNING" "Node.js n√£o encontrado"
        if ask_user "Instalar Node.js LTS?" "y"; then
            install_nodejs_nodesource
        else
            log "INFO" "Node.js skip - pode instalar depois com: curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -"
        fi
    fi
}

install_nodejs_nodesource() {
    log "INFO" "Instalando Node.js LTS via NodeSource..."

    # Adicionar reposit√≥rio NodeSource
    curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
    sudo apt install -y nodejs

    # Verificar instala√ß√£o
    if command -v node >/dev/null 2>&1; then
        local node_version=$(node --version)
        local npm_version=$(npm --version)
        log "SUCCESS" "Node.js instalado: $node_version (npm: $npm_version)"
    else
        log "ERROR" "Falha na instala√ß√£o do Node.js"
    fi
}

check_and_install_yarn() {
    if ! command -v node >/dev/null 2>&1; then
        return 0  # Skip se n√£o tem Node.js
    fi

    if command -v yarn >/dev/null 2>&1; then
        local yarn_version=$(yarn --version)
        log "SUCCESS" "Yarn j√° instalado: $yarn_version"
    else
        if ask_user "Instalar Yarn package manager?" "y"; then
            log "INFO" "Instalando Yarn..."
            curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
            sudo apt update -qq
            sudo apt install -y yarn

            if command -v yarn >/dev/null 2>&1; then
                log "SUCCESS" "Yarn instalado: $(yarn --version)"
            fi
        fi
    fi
}

check_and_install_build_tools() {
    log "INFO" "Verificando ferramentas de build adicionais..."

    # Verificar se tem make, cmake, pkg-config (√∫teis para compila√ß√£o)
    local build_tools=()

    if ! command -v make >/dev/null 2>&1; then
        build_tools+=("make")
    fi

    if ! command -v cmake >/dev/null 2>&1; then
        build_tools+=("cmake")
    fi

    if ! command -v pkg-config >/dev/null 2>&1; then
        build_tools+=("pkg-config")
    fi

    if [[ ${#build_tools[@]} -gt 0 ]]; then
        if ask_user "Instalar ferramentas de build adicionais (${build_tools[*]})?" "y"; then
            sudo apt install -y "${build_tools[@]}"
            log "SUCCESS" "Ferramentas de build instaladas: ${build_tools[*]}"
        fi
    else
        log "SUCCESS" "Ferramentas de build j√° dispon√≠veis"
    fi
}

check_and_install_snap() {
    if ! command -v snap >/dev/null 2>&1; then
        if ask_user "Instalar Snap para acesso a mais aplica√ß√µes?" "y"; then
            sudo apt install -y snapd
            log "SUCCESS" "Snap instalado"
        fi
    else
        log "SUCCESS" "Snap j√° dispon√≠vel"
    fi
}

# =============================================================================
# VERIFICAR FERRAMENTAS ESPEC√çFICAS DO DESENVOLVIMENTO
# =============================================================================

check_development_environment() {
    log "INFO" "Verificando ambiente de desenvolvimento atual..."

    echo ""

# Ferramentas modernas
echo "üöÄ FERRAMENTAS MODERNAS:"
if command -v fzf >/dev/null 2>&1; then
    echo "   ‚úÖ fzf: $(fzf --version | head -1)"
    echo "      üí° Use: ff (fuzzy find), Ctrl+R (hist√≥rico), Ctrl+T (arquivos)"
else
    echo "   ‚ùå fzf: N√£o instalado"
fi

if command -v fd >/dev/null 2>&1; then
    echo "   ‚úÖ fd: $(fd --version)"
else
    echo "   ‚ùå fd: N√£o instalado"
fi

if command -v bat >/dev/null 2>&1; then
    echo "   ‚úÖ bat: $(bat --version | head -1)"
else
    echo "   ‚ùå bat: N√£o instalado"
fi

if command -v exa >/dev/null 2>&1; then
    echo "   ‚úÖ exa: $(exa --version | head -1)"
else
    echo "   ‚ùå exa: N√£o instalado"
fi

if command -v zoxide >/dev/null 2>&1; then
    echo "   ‚úÖ zoxide: $(zoxide --version)"
    echo "      üí° Use: z <diret√≥rio> (cd inteligente)"
else
    echo "   ‚ùå zoxide: N√£o instalado"
fi

if command -v direnv >/dev/null 2>&1; then
    echo "   ‚úÖ direnv: $(direnv --version)"
    echo "      üí° Use: echo 'export VAR=value' > .envrc && direnv allow"
else
    echo "   ‚ùå direnv: N√£o instalado"
fi

if command -v gh >/dev/null 2>&1; then
    echo "   ‚úÖ GitHub CLI: $(gh --version | head -1)"
    echo "      üí° Use: ghpr (create PR), ghprs (list PRs)"
else
    echo "   ‚ùå GitHub CLI: N√£o instalado"
fi

if command -v lazygit >/dev/null 2>&1; then
    echo "   ‚úÖ lazygit: Git TUI"
    echo "      üí° Use: lg ou gitflow"
else
    echo "   ‚ùå lazygit: N√£o instalado"
fi

if command -v glow >/dev/null 2>&1; then
    echo "   ‚úÖ glow: Markdown viewer"
    echo "      üí° Use: readme, glow arquivo.md"
else
    echo "   ‚ùå glow: N√£o instalado"
fi

if command -v ncdu >/dev/null 2>&1; then
    echo "   ‚úÖ ncdu: Disk usage analyzer"
else
    echo "   ‚ùå ncdu: N√£o instalado"
fi

if command -v http >/dev/null 2>&1; then
    echo "   ‚úÖ httpie: API testing tool"
else
    echo "   ‚ùå httpie: N√£o instalado"
fi

if command -v meld >/dev/null 2>&1; then
    echo "   ‚úÖ meld: Visual diff tool"
else
    echo "   ‚ùå meld: N√£o instalado"
fi

echo ""
echo "üêö SHELL ENVIRONMENT:"
if command -v zsh >/dev/null 2>&1; then
    echo "   ‚úÖ Zsh: $(zsh --version)"
    if [[ -d "$HOME/.oh-my-zsh" ]]; then
        echo "   ‚úÖ Oh-My-Zsh: Instalado"
    else
        echo "   ‚ùå Oh-My-Zsh: N√£o instalado"
    fi
else
    echo "   ‚ùå Zsh: N√£o instalado"
fi

echo "   üìä Shell atual: $SHELL"
echo ""
echo "üéØ VERIFICA√á√ÉO FINAL:"
echo "   ‚úÖ Execute: dev-health (monitoriza√ß√£o completa)"
echo "   ‚úÖ Execute: dev-tools (verificar ferramentas)"
echo "   ‚úÖ Execute: dev-benchmark (testar performance)"
echo "   ‚úÖ Execute: dev-network-info (ver config de rede)"
echo "   ‚úÖ Execute: dev-diff (ver diferen√ßas vs Ubuntu padr√£o)"
echo "   ‚úÖ Teste: dev-clean status"
echo ""
echo "üìã COMANDOS DE TESTE IMEDIATOS:"
echo "   bc --version          # Calculadora (usado pelo script)"
echo "   ss -tulpn | head      # Verificar portas"
echo "   notify-send 'Teste'   # Notifica√ß√µes desktop"
echo "   cat /proc/sys/net/core/rmem_max  # Ver buffer rede atual"
echo "   fzf --version         # Fuzzy finder (se instalado)"
echo "   fd --version          # Find melhorado (se instalado)"
echo "   gh --version          # GitHub CLI (se instalado)"
echo "   lazygit --version     # Git visual (se instalado)"
echo "   zoxide --version      # CD inteligente (se instalado)"
echo "   direnv --version      # Ambiente por diret√≥rio (se instalado)"
echo "   systemctl status fail2ban  # Verificar fail2ban (se SSH ativo)"
echo "   cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor  # CPU governor"
echo ""
echo "üí° MELHORIAS ADICIONAIS IMPLEMENTADAS:"
echo "   üîã CPU governor ajusta automaticamente (AC=performance, bateria=powersave)"
echo "   üì¶ Ferramentas modernas atualizam automaticamente (mensal)"
echo "   üîí Auditoria de seguran√ßa mensal autom√°tica (Lynis)"
echo "   üìä Monitoriza√ß√£o completa com benchmarks"
echo "   üîÑ Sistema de rollback com scripts autom√°ticos"
echo "   ‚öôÔ∏è Configura√ß√£o vim/bash/SSH otimizada para produtividade"
echo "   üåê DNS otimizado (CloudFlare + Google)"
echo "   üõ°Ô∏è Prote√ß√£o fail2ban contra ataques SSH"
echo "   üêö Zsh + Oh-My-Zsh + Zoxide + Direnv (shell produtivo)"
echo ""
    echo "üìã FERRAMENTAS DETECTADAS:"

    # Node.js ecosystem
    if command -v node >/dev/null 2>&1; then
        echo "   ‚úÖ Node.js: $(node --version)"
        echo "   ‚úÖ npm: $(npm --version)"
    else
        echo "   ‚ùå Node.js: N√£o instalado"
    fi

    if command -v yarn >/dev/null 2>&1; then
        echo "   ‚úÖ Yarn: $(yarn --version)"
    else
        echo "   ‚ùå Yarn: N√£o instalado"
    fi

    # Python ecosystem
    if command -v python3 >/dev/null 2>&1; then
        echo "   ‚úÖ Python3: $(python3 --version | cut -d' ' -f2)"
    else
        echo "   ‚ùå Python3: N√£o instalado"
    fi

    if command -v pip3 >/dev/null 2>&1; then
        echo "   ‚úÖ pip3: $(pip3 --version | cut -d' ' -f2)"
    else
        echo "   ‚ùå pip3: N√£o instalado"
    fi

    # Build tools
    if command -v gcc >/dev/null 2>&1; then
        echo "   ‚úÖ GCC: $(gcc --version | head -1 | cut -d' ' -f4)"
    else
        echo "   ‚ùå GCC: N√£o instalado"
    fi

    if command -v make >/dev/null 2>&1; then
        echo "   ‚úÖ Make: $(make --version | head -1 | cut -d' ' -f3)"
    else
        echo "   ‚ùå Make: N√£o instalado"
    fi

    # Git
    if command -v git >/dev/null 2>&1; then
        echo "   ‚úÖ Git: $(git --version | cut -d' ' -f3)"
    else
        echo "   ‚ùå Git: N√£o instalado"
    fi

    # Docker
    if command -v docker >/dev/null 2>&1; then
        echo "   ‚úÖ Docker: $(docker --version | cut -d' ' -f3 | tr -d ',')"
    else
        echo "   ‚ùå Docker: N√£o instalado"
    fi

    echo ""
}

# =============================================================================
# CONFIGURA√á√ÉO B√ÅSICA DE GIT (SE N√ÉO CONFIGURADO)
# =============================================================================

configure_git_basics() {
    if ! command -v git >/dev/null 2>&1; then
        return 0
    fi

    # Verificar se Git j√° est√° configurado
    if git config --global user.name >/dev/null 2>&1 && git config --global user.email >/dev/null 2>&1; then
        log "SUCCESS" "Git j√° configurado para $(git config --global user.name)"
        return 0
    fi

    log "INFO" "Git n√£o est√° configurado"
    if ask_user "Configurar Git agora (nome e email)?" "y"; then
        echo ""
        read -p "Nome completo para Git: " git_name
        read -p "Email para Git: " git_email

        if [[ -n "$git_name" && -n "$git_email" ]]; then
            git config --global user.name "$git_name"
            git config --global user.email "$git_email"

            # Configura√ß√µes √∫teis adicionais
            git config --global init.defaultBranch main
            git config --global pull.rebase false
            git config --global core.autocrlf input

            log "SUCCESS" "Git configurado para $git_name ($git_email)"
        else
            log "WARNING" "Git n√£o configurado - pode fazer depois com: git config --global user.name/user.email"
        fi
    fi
}

# =============================================================================
# CONFIGURA√á√ïES B√ÅSICAS √öTEIS PARA PRODUTIVIDADE
# =============================================================================

configure_productivity_basics() {
    log "INFO" "Configurando configura√ß√µes b√°sicas para produtividade..."

    # 1. VIM CONFIGURA√á√ÉO B√ÅSICA
    configure_vim_basics

    # 2. BASH HISTORY MELHORADO
    configure_enhanced_bash_history

    # 3. SSH CLIENT OTIMIZADO
    configure_ssh_client

    # 4. TIMEZONE E LOCALE
    configure_locale_timezone

    # 5. DNS OTIMIZADO (considerando conflitos)
    if [[ "$SKIP_DNS_CONFIG" != true ]]; then
        configure_dns_optimization
    fi

    # 6. CONFIGURA√á√ïES DE SISTEMA √öTEIS
    configure_system_tweaks

    log "SUCCESS" "Configura√ß√µes b√°sicas de produtividade aplicadas"
}

configure_vim_basics() {
    log "INFO" "Configurando vim b√°sico..."

    # Vim configura√ß√£o universal (funciona para todos os utilizadores)
    cat > ~/.vimrc << 'EOF'
" Configura√ß√£o VIM b√°sica para desenvolvimento

" Apar√™ncia
syntax on
set number
set relativenumber
set cursorline
set showmatch
set ruler
set laststatus=2

" Indenta√ß√£o
set autoindent
set smartindent
set tabstop=4
set shiftwidth=4
set expandtab
set smarttab

" Busca
set hlsearch
set incsearch
set ignorecase
set smartcase

" Performance
set lazyredraw
set ttyfast

" Usabilidade
set backspace=indent,eol,start
set wildmenu
set wildmode=longest:full,full
set completeopt=menuone,longest
set mouse=a
set clipboard=unnamedplus
set noswapfile
set nobackup
set undofile
set undodir=~/.vim/undodir

" Criar diret√≥rio de undo se n√£o existir
if !isdirectory($HOME."/.vim/undodir")
    call mkdir($HOME."/.vim/undodir", "p")
endif

" Atalhos √∫teis
nnoremap <C-s> :w<CR>
inoremap <C-s> <Esc>:w<CR>a
nnoremap <C-q> :q<CR>

" Navega√ß√£o entre splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Para desenvolvimento web
autocmd FileType html,css,javascript,typescript,json set tabstop=2 shiftwidth=2
autocmd FileType yaml,yml set tabstop=2 shiftwidth=2
autocmd FileType python set tabstop=4 shiftwidth=4

" Remover espa√ßos em branco no save
autocmd BufWritePre * :%s/\s\+$//e
EOF

    log "SUCCESS" "Vim configurado com configura√ß√µes b√°sicas de desenvolvimento"
}

configure_enhanced_bash_history() {
    log "INFO" "Configurando bash history melhorado..."

    # Adicionar configura√ß√µes avan√ßadas de history ao bashrc
    if ! grep -q "# === BASH HISTORY MELHORADO ===" ~/.bashrc 2>/dev/null; then
        cat >> ~/.bashrc << 'EOF'

# === BASH HISTORY MELHORADO ===
# Configura√ß√µes avan√ßadas de hist√≥rico

# Tamanho do hist√≥rico
export HISTSIZE=50000
export HISTFILESIZE=100000

# Formato com timestamps
export HISTTIMEFORMAT="%d/%m/%y %T "

# Controle do hist√≥rico
export HISTCONTROL=ignoreboth:erasedups

# Ignorar comandos espec√≠ficos
export HISTIGNORE="ls:ps:history:exit:clear:cd:pwd"

# Op√ß√µes de history
shopt -s histappend        # Append ao history em vez de overwrite
shopt -s histverify        # Verificar command history expansion
shopt -s histreedit        # Editar command history expansion
shopt -s checkwinsize      # Check window size after each command

# Sincronizar history entre sess√µes
export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"

# Fun√ß√£o para pesquisar no hist√≥rico com fzf (se dispon√≠vel)
if command -v fzf >/dev/null 2>&1; then
    __fzf_history__() {
        local output
        output=$(
            HISTTIMEFORMAT='' history |
            fzf --tac --sync -n2..,.. \
                --tiebreak=index \
                --bind=ctrl-r:toggle-sort \
                --query="$READLINE_LINE"
        ) && READLINE_LINE="${output#*$'\t'}"
        READLINE_POINT=${#READLINE_LINE}
    }
    bind -m emacs-standard -x '"\C-r": __fzf_history__'
fi

# Fun√ß√£o para ver hist√≥rico por data
histdate() {
    if [ -z "$1" ]; then
        echo "Uso: histdate DD/MM/YY"
        return 1
    fi
    history | grep "$1"
}

# Fun√ß√£o para estat√≠sticas do hist√≥rico
histstats() {
    history | awk '{print $4}' | sort | uniq -c | sort -nr | head -20
}
EOF
        log "SUCCESS" "Bash history melhorado configurado"
    fi
}

configure_ssh_client() {
    log "INFO" "Configurando SSH client otimizado..."

    mkdir -p ~/.ssh
    chmod 700 ~/.ssh

    # Configura√ß√£o SSH client otimizada
    cat > ~/.ssh/config << 'EOF'
# Configura√ß√£o SSH Client Otimizada

# Configura√ß√µes globais
Host *
    # Performance
    Compression yes
    ServerAliveInterval 60
    ServerAliveCountMax 3
    TCPKeepAlive yes

    # Security
    HashKnownHosts yes
    VisualHostKey yes

    # Usabilidade
    ControlMaster auto
    ControlPath ~/.ssh/control-%r@%h:%p
    ControlPersist 5m

    # Evitar timeouts
    ConnectTimeout 30

    # Reutilizar conex√µes
    AddKeysToAgent yes

# Exemplo de configura√ß√£o para servidores de desenvolvimento
# Descomente e ajuste conforme necess√°rio
#
# Host dev-server
#     HostName your-dev-server.com
#     User your-username
#     Port 22
#     IdentityFile ~/.ssh/id_rsa
#     LocalForward 3000 localhost:3000
#     LocalForward 8080 localhost:8080
EOF

    chmod 600 ~/.ssh/config
    log "SUCCESS" "SSH client otimizado configurado"
}

configure_locale_timezone() {
    log "INFO" "Verificando locale e timezone..."

    # Verificar se locale est√° configurado corretamente
    if ! locale | grep -q "pt_PT\|en_US" 2>/dev/null; then
        log "INFO" "Configurando locale..."
        sudo apt install -y locales

        if ask_user "Configurar locale para portugu√™s (pt_PT.UTF-8)?" "y"; then
            sudo locale-gen pt_PT.UTF-8
            sudo update-locale LANG=pt_PT.UTF-8
            log "SUCCESS" "Locale portugu√™s configurado"
        else
            sudo locale-gen en_US.UTF-8
            sudo update-locale LANG=en_US.UTF-8
            log "SUCCESS" "Locale ingl√™s configurado"
        fi
    fi

    # Verificar timezone (assumindo Portugal como padr√£o)
    current_tz=$(timedatectl show -p Timezone --value)
    if [[ "$current_tz" != "Europe/Lisbon" ]]; then
        if ask_user "Configurar timezone para Lisboa?" "y"; then
            sudo timedatectl set-timezone Europe/Lisbon
            log "SUCCESS" "Timezone configurado para Lisboa"
        fi
    fi
}

configure_dns_optimization() {
    if ask_user "Configurar DNS otimizado (CloudFlare + Google)?" "y"; then
        log "INFO" "Configurando DNS otimizado..."

        # Backup do resolv.conf atual
        sudo cp /etc/resolv.conf /etc/resolv.conf.backup

        # Configurar systemd-resolved com DNS r√°pidos
        sudo tee /etc/systemd/resolved.conf > /dev/null << 'EOF'
[Resolve]
DNS=1.1.1.1 8.8.8.8 1.0.0.1 8.8.4.4
FallbackDNS=9.9.9.9 149.112.112.112
Domains=~.
DNSSEC=allow-downgrade
DNSOverTLS=opportunistic
Cache=yes
EOF

        sudo systemctl restart systemd-resolved
        log "SUCCESS" "DNS otimizado configurado (CloudFlare + Google)"
    fi
}

configure_system_tweaks() {
    log "INFO" "Aplicando tweaks √∫teis do sistema..."

    # Configurar logrotate para logs de desenvolvimento
    sudo tee /etc/logrotate.d/dev-logs > /dev/null << 'EOF'
/var/log/dev-maintenance/*.log {
    weekly
    rotate 4
    compress
    delaycompress
    missingok
    notifempty
    create 644 root root
}

/home/*/.npm/_logs/*.log {
    weekly
    rotate 2
    compress
    delaycompress
    missingok
    notifempty
    copytruncate
}
EOF

    # Otimizar systemd para desenvolvimento
    sudo tee /etc/systemd/system.conf.d/dev-optimizations.conf > /dev/null << 'EOF'
[Manager]
# Reduce boot time
DefaultTimeoutStartSec=30s
DefaultTimeoutStopSec=10s

# Optimize for development
DefaultLimitNOFILE=65536
DefaultLimitNPROC=32768
EOF

    # Configurar ambiente para desenvolvimento
    if ! grep -q "# === DEV ENVIRONMENT ===" ~/.profile 2>/dev/null; then
        cat >> ~/.profile << 'EOF'

# === DEV ENVIRONMENT ===
# Configura√ß√µes para desenvolvimento

# Adicionar paths √∫teis
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/bin:$PATH"

# Configura√ß√µes para Node.js
export NODE_ENV=development
export NODE_OPTIONS="--max-old-space-size=4096"

# Configura√ß√µes para Python
export PYTHONDONTWRITEBYTECODE=1
export PYTHONUNBUFFERED=1

# Configura√ß√µes para desenvolvimento
export EDITOR=vim
export BROWSER=firefox
export TERM=xterm-256color

# Cores no terminal
export CLICOLOR=1
export LS_COLORS='di=34:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
EOF
        log "SUCCESS" "Ambiente de desenvolvimento configurado"
    fi

    log "SUCCESS" "System tweaks aplicados"
}

# =============================================================================
# GNOME OTIMIZADO PARA DESENVOLVIMENTO
# =============================================================================

optimize_gnome_minimalist() {
    if ! command -v gsettings >/dev/null 2>&1; then
        log "INFO" "GNOME n√£o detectado - pulando otimiza√ß√µes"
        return 0
    fi

    log "INFO" "Detectado ambiente GNOME"

    # SEMPRE otimizar terminal (essencial para desenvolvimento)
    optimize_gnome_terminal

    # Perguntar sobre otimiza√ß√µes mais agressivas
    if ask_user "Aplicar GNOME minimalista para m√°xima performance? (recomendado)" "y"; then
        configure_gnome_minimal_performance
    fi
}

optimize_gnome_terminal() {
    log "INFO" "Otimizando GNOME Terminal para desenvolvimento..."

    # Configura√ß√µes espec√≠ficas para terminal
    local profile_id=$(gsettings get org.gnome.Terminal.ProfilesList default | tr -d "'")
    local profile_path="org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:$profile_id/"

    # Otimizar scrollback (importante para logs)
    if [[ $RAM_GB -ge 16 ]]; then
        gsettings set "$profile_path" scrollback-lines 100000
        log "INFO" "Terminal scrollback: 100K linhas (16GB+ RAM)"
    elif [[ $RAM_GB -ge 8 ]]; then
        gsettings set "$profile_path" scrollback-lines 50000
        log "INFO" "Terminal scrollback: 50K linhas (8GB+ RAM)"
    else
        gsettings set "$profile_path" scrollback-lines 25000
        log "INFO" "Terminal scrollback: 25K linhas"
    fi

    # USAR CORES DO TEMA DO SISTEMA (n√£o cores customizadas)
    gsettings set "$profile_path" use-theme-colors true
    gsettings set "$profile_path" use-system-font true

    log "SUCCESS" "GNOME Terminal otimizado (usa cores do tema do sistema)"
}

configure_gnome_minimal_performance() {
    log "INFO" "Configurando GNOME minimalista para performance..."

    # ‚ö†Ô∏è PERGUNTA DE SEGURAN√áA PARA AMBIENTE EMPRESARIAL
    echo ""
    log "WARNING" "üè¢ VERIFICA√á√ÉO EMPRESARIAL:"
    echo "   ‚Ä¢ Esta configura√ß√£o vai DESATIVAR anima√ß√µes e efeitos visuais"
    echo "   ‚Ä¢ Pode n√£o seguir 'look & feel' padr√£o da empresa"
    echo "   ‚Ä¢ Melhora significativamente a performance"
    echo "   ‚Ä¢ Mant√©m todas as funcionalidades, apenas remove 'eye candy'"

    if ! ask_user "Continuar com GNOME minimalista? (revers√≠vel)" "y"; then
        log "INFO" "Mantendo GNOME padr√£o (apenas terminal otimizado)"
        return 0
    fi
    # Dash to Dock otimizado
    gsettings set org.gnome.shell.extensions.dash-to-dock dock-fixed true
    gsettings set org.gnome.shell.extensions.dash-to-dock dock-position 'LEFT'
    gsettings set org.gnome.shell.extensions.dash-to-dock dash-max-icon-size 16
    gsettings set org.gnome.shell.extensions.dash-to-dock extend-height true
    gsettings set org.gnome.shell.extensions.dash-to-dock show-show-apps-button true

    # Performance b√°sica (SEGURO)
    gsettings set org.gnome.desktop.interface enable-animations false
    gsettings set org.gnome.shell.extensions.dash-to-dock animate-show-apps false 2>/dev/null || true
    gsettings set org.gnome.desktop.interface enable-hot-corners false

    # Tema dark DO SISTEMA (n√£o cores customizadas)
    gsettings set org.gnome.desktop.interface gtk-theme 'Yaru-dark' 2>/dev/null || gsettings set org.gnome.desktop.interface gtk-theme 'Adwaita-dark'
    gsettings set org.gnome.desktop.interface color-scheme 'prefer-dark'

    # Nautilus otimizado
    gsettings set org.gnome.nautilus.preferences show-image-thumbnails 'never'
    gsettings set org.gnome.nautilus.list-view use-tree-view true 2>/dev/null || true

    # Privacidade melhorada
    gsettings set org.gnome.desktop.privacy report-technical-problems false
    gsettings set org.gnome.desktop.privacy send-software-usage-stats false

    # Touchpad otimizado (para laptops)
    gsettings set org.gnome.desktop.peripherals.touchpad natural-scroll true
    gsettings set org.gnome.desktop.peripherals.touchpad two-finger-scrolling-enabled true
    gsettings set org.gnome.desktop.peripherals.touchpad tap-to-click true

    # Power management inteligente
    gsettings set org.gnome.settings-daemon.plugins.power idle-dim true
    gsettings set org.gnome.desktop.session idle-delay 900

    # Workspaces (manter din√¢mico - √∫til para desenvolvimento)
    gsettings set org.gnome.mutter dynamic-workspaces true

    # Atalho √∫til para terminal
    # gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybindings "['/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/']"
    # gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ name 'Terminal'
    # gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ command 'gnome-terminal'
    # gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ binding '<Super>Return'

    # MANTER funcionalidades importantes (n√£o remover)
    # - Window controls (minimize, maximize, close) - MANTIDO
    # - Dock/Activities - MANTIDO
    # - Extensions b√°sicas - MANTIDO

    log "SUCCESS" "GNOME configurado para m√°xima performance"
    log "INFO" "üí° Mantido: workspaces, dock, window controls, extens√µes b√°sicas"
    log "INFO" "üé® Removido: anima√ß√µes, hot corners, thumbnails"
    log "INFO" "‚å®Ô∏è Novo atalho: Super+Enter = Terminal"
}

# =============================================================================
# ALIASES INTELIGENTES PARA DESENVOLVIMENTO
# =============================================================================

configure_smart_dev_aliases() {
    log "INFO" "Configurando aliases inteligentes para desenvolvimento..."

    # Criar arquivo de aliases que funciona tanto para bash quanto zsh
    cat > ~/.dev_aliases << 'EOF'
# ============================================================================
# ALIASES INTELIGENTES PARA DESENVOLVIMENTO
# Funciona em bash e zsh
# ============================================================================

# === NAVEGA√á√ÉO MELHORADA ===
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'

# Fun√ß√£o para detectar qual comando usar (eza ou exa)
setup_exa_aliases() {
    if command -v eza >/dev/null 2>&1; then
        alias ls='eza --icons'
        alias ll='eza -la --icons --git'
        alias tree='eza --tree --icons'
    elif command -v exa >/dev/null 2>&1; then
        alias ls='exa --icons'
        alias ll='exa -la --icons --git'
        alias tree='exa --tree --icons'
    fi
}

# Chamar a fun√ß√£o
setup_exa_aliases

if command -v bat >/dev/null 2>&1; then
    alias cat='bat --paging=never'
    alias less='bat'
fi

if command -v fd >/dev/null 2>&1; then
    alias find='fd'
fi

if command -v rg >/dev/null 2>&1; then
    alias grep='rg'
fi

# === GIT PRODUTIVO ===
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git log --oneline'
alias gb='git branch'
alias gco='git checkout'
alias gd='git diff'
alias gdc='git diff --cached'

# Git aliases avan√ßados
alias ghpr='gh pr create'
alias ghprs='gh pr list'
alias gitflow='lazygit'
alias lg='lazygit'

# === DOCKER R√ÅPIDO ===
alias d='docker'
alias dc='docker-compose'
alias dps='docker ps'
alias di='docker images'
alias dex='docker exec -it'
alias dlogs='docker logs -f'

# === DESENVOLVIMENTO ===
alias serve='python3 -m http.server 8000'
alias nodemon='npx nodemon'
alias ni='npm install'
alias nr='npm run'
alias ns='npm start'
alias nt='npm test'
alias nb='npm run build'

# Yarn
alias ys='yarn start'
alias yb='yarn build'
alias yt='yarn test'
alias ya='yarn add'

# Python
alias py='python3'
alias pip='pip3'
alias venv='python3 -m venv'
alias activate='source venv/bin/activate'

# === SISTEMA E MANUTEN√á√ÉO ===
alias update='sudo apt update && sudo apt upgrade'
alias install='sudo apt install'
alias search='apt search'
alias info='apt show'

# Limpeza r√°pida
alias clean='sudo apt autoremove && sudo apt autoclean'
alias cleancache='npm cache clean --force && pip cache purge'

# Monitoramento
alias cpu='htop'
alias disk='ncdu'
alias ports='ss -tulpn'
alias processes='ps aux | head -20'

# === LOGS E DEBUGGING ===
alias logs='journalctl -f'
alias logsearch='journalctl -f | grep'
alias syslog='tail -f /var/log/syslog'
alias auth='tail -f /var/log/auth.log'

# === NETWORKING ===
alias ping='ping -c 5'
alias myip='curl -s ipinfo.io/ip'
alias localip='hostname -I | cut -d" " -f1'
alias netinfo='ip addr show'

# === DESENVOLVIMENTO WEB ===
alias serve='python3 -m http.server'
alias serve8080='python3 -m http.server 8080'
alias phpserve='php -S localhost:8000'
alias nodeserve='npx http-server'

# === UTILS ===
alias weather='curl wttr.in'
alias speedtest='curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python3 -'
alias json='python3 -m json.tool'
alias urlencode='python3 -c "import urllib.parse; import sys; print(urllib.parse.quote(sys.argv[1]))"'

# === FERRAMENTAS ESPEC√çFICAS ===
# fzf
alias ff='fzf --preview "bat --color=always {}"'
alias fcd='cd $(find . -type d | fzf)'

# zoxide (se instalado)
if command -v zoxide >/dev/null 2>&1; then
    alias cd='z'
fi

# GitHub CLI
if command -v gh >/dev/null 2>&1; then
    alias ghrepo='gh repo view --web'
    alias ghissue='gh issue create'
fi

# Markdown
if command -v glow >/dev/null 2>&1; then
    alias readme='glow README.md'
    alias md='glow'
fi

# === FUN√á√ïES √öTEIS ===

# Fun√ß√£o para criar projeto rapidamente
mkproject() {
    local name="${1:-new-project}"
    mkdir "$name" && cd "$name"
    git init
    echo "# $name" > README.md
    echo "node_modules/" > .gitignore
    echo "‚úÖ Projeto '$name' criado!"
}

# Fun√ß√£o para procurar em arquivos
searchin() {
    if command -v rg >/dev/null 2>&1; then
        rg -i "$1" .
    else
        grep -r -i "$1" .
    fi
}

# Fun√ß√£o para backup r√°pido
backup() {
    local file="$1"
    cp "$file" "${file}.backup.$(date +%Y%m%d-%H%M%S)"
    echo "‚úÖ Backup criado: ${file}.backup.$(date +%Y%m%d-%H%M%S)"
}

# Fun√ß√£o para ver tamanho de pastas
dirsize() {
    du -sh "${1:-.}"/* | sort -hr
}

# Fun√ß√£o para testar conectividade
testnet() {
    local host="${1:-google.com}"
    echo "Testing connectivity to $host..."
    ping -c 3 "$host"
}

# Fun√ß√£o para info do sistema
sysinfo() {
    echo "üñ•Ô∏è SISTEMA:"
    echo "   OS: $(lsb_release -d | cut -f2)"
    echo "   Kernel: $(uname -r)"
    echo "   Uptime: $(uptime -p)"
    echo ""
    echo "üíæ MEM√ìRIA:"
    free -h
    echo ""
    echo "üíø DISCO:"
    df -h /
}

# Fun√ß√£o para limpeza de desenvolvimento
devclean() {
    echo "üßπ Limpando ambiente de desenvolvimento..."

    # Node.js
    if [[ -d node_modules ]]; then
        echo "Removendo node_modules..."
        rm -rf node_modules
    fi

    # Python
    find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null
    find . -name "*.pyc" -delete 2>/dev/null

    # Cache npm
    npm cache clean --force 2>/dev/null || true

    echo "‚úÖ Limpeza conclu√≠da!"
}

# Fun√ß√£o para info de porta
portinfo() {
    local port="$1"
    if [[ -z "$port" ]]; then
        echo "Uso: portinfo <porta>"
        return 1
    fi

    echo "üîç Informa√ß√µes da porta $port:"
    lsof -i :$port
}

# Fun√ß√£o para debugging de rede e processos
netdebug() {
    echo "üåê DEBUG DE REDE E PROCESSOS:"
    echo ""
    echo "=== CONEX√ïES ATIVAS ==="
    ss -tulpn | head -10
    echo ""
    echo "=== PROCESSOS TOP CPU ==="
    ps aux --sort=-%cpu | head -10
    echo ""
    echo "=== PROCESSOS TOP MEM√ìRIA ==="
    ps aux --sort=-%mem | head -10
    echo ""
    echo "=== INTERFACES DE REDE ==="
    ip addr show | grep -E '^[0-9]+:|inet '
}

# Fun√ß√£o para monitorar espa√ßo em disco em tempo real
diskwatch() {
    watch -n 5 'df -h | grep -E "(Filesystem|/dev/)"'
}
EOF

    # Carregar aliases no bashrc se n√£o existir
    if ! grep -q "source ~/.dev_aliases" ~/.bashrc 2>/dev/null; then
        echo "source ~/.dev_aliases" >> ~/.bashrc
    fi

    # Se zsh existir, carregar no zshrc tamb√©m
    if [[ -f ~/.zshrc ]] && ! grep -q "source ~/.dev_aliases" ~/.zshrc 2>/dev/null; then
        echo "source ~/.dev_aliases" >> ~/.zshrc
    fi

    log "SUCCESS" "Aliases inteligentes configurados em ~/.dev_aliases"
    log "INFO" "üí° Use 'source ~/.dev_aliases' para carregar imediatamente"
}

# =============================================================================
# SISTEMA DE MANUTEN√á√ÉO EMPRESARIAL
# =============================================================================

setup_enterprise_maintenance() {
    log "INFO" "Configurando sistema de manuten√ß√£o empresarial..."

    sudo mkdir -p /var/log/dev-maintenance

    # Script principal de manuten√ß√£o
    sudo tee /usr/local/bin/dev-maintenance.sh > /dev/null << 'EOF'
#!/bin/bash
set -euo pipefail

MAINTENANCE_LOG="/var/log/dev-maintenance/maintenance.log"
STATS_LOG="/var/log/dev-maintenance/stats.log"
ALERT_THRESHOLD_GB=3
CONFIG_FILE="/etc/dev-maintenance.conf"

[[ -f "$CONFIG_FILE" ]] && source "$CONFIG_FILE"
readonly CONFIG_FILE

log_maintenance() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "${timestamp} [${level}] ${message}" >> "$MAINTENANCE_LOG"
    echo "[${level}] ${message}"
}

get_free_space_gb() {
    df / | awk 'NR==2 {printf "%.1f", $4/1024/1024}'
}

is_enterprise_docker() {
    [[ -f /etc/docker/daemon.json ]] && grep -q "registry\|proxy" /etc/docker/daemon.json 2>/dev/null
}

docker_smart_cleanup() {
    local mode="${1:-conservative}"

    if ! command -v docker >/dev/null 2>&1; then
        return 0
    fi

    local db_containers=$(docker ps -a --format "{{.Names}}" 2>/dev/null | grep -E "(postgres|mysql|mariadb|mongo|redis|elastic|cassandra|db|database)" || true)

    case "$mode" in
        "conservative")
            docker ps -a --filter "status=exited" --format "{{.Names}}" | while read container; do
                if [[ -n "$container" ]] && ! echo "$db_containers" | grep -q "^$container$"; then
                    docker rm "$container" 2>/dev/null || true
                fi
            done
            docker image prune -f >/dev/null 2>&1 || true
            ;;
        "moderate")
            docker_smart_cleanup conservative
            docker images --format "{{.Repository}}:{{.Tag}}" | while read image; do
                if [[ ! "$image" =~ (postgres|mysql|mariadb|mongo|redis|elastic|cassandra) ]]; then
                    if ! docker ps -a --format "{{.Image}}" | grep -q "^$image$"; then
                        docker rmi "$image" 2>/dev/null || true
                    fi
                fi
            done
            docker builder prune --filter "until=168h" -f >/dev/null 2>&1 || true
            ;;
        "aggressive")
            local db_volumes=$(docker volume ls --format "{{.Name}}" 2>/dev/null | grep -E "(data|postgres|mysql|mongo|redis|elastic|db)" || true)

            docker ps --format "{{.Names}}" | while read container; do
                if [[ -n "$container" ]] && ! echo "$db_containers" | grep -q "^$container$"; then
                    docker stop "$container" 2>/dev/null || true
                    docker rm "$container" 2>/dev/null || true
                fi
            done

            docker images --format "{{.Repository}}:{{.Tag}}" | while read image; do
                if [[ ! "$image" =~ (postgres|mysql|mariadb|mongo|redis|elastic|cassandra) ]]; then
                    docker rmi "$image" 2>/dev/null || true
                fi
            done

            docker volume ls --format "{{.Name}}" | while read volume; do
                if [[ -n "$volume" ]] && ! echo "$db_volumes" | grep -q "^$volume$"; then
                    docker volume rm "$volume" 2>/dev/null || true
                fi
            done

            docker network prune -f >/dev/null 2>&1 || true
            docker builder prune -a -f >/dev/null 2>&1 || true
            ;;
    esac
}

daily_cleanup() {
    log_maintenance "INFO" "=== LIMPEZA DI√ÅRIA ==="
    local space_before=$(get_free_space_gb)

    find /tmp -name "*.log" -type f -mtime +2 -delete 2>/dev/null || true

    if [[ -d ~/.npm/_cacache ]]; then
        local npm_size=$(du -sm ~/.npm/_cacache 2>/dev/null | cut -f1 || echo 0)
        [[ $npm_size -gt 500 ]] && npm cache clean --force >/dev/null 2>&1 || true
    fi

    find ~/.cache/pip -type f -mtime +7 -delete 2>/dev/null || true

    if ! is_enterprise_docker; then
        docker_smart_cleanup conservative
    fi

    local space_after=$(get_free_space_gb)
    local freed=$(echo "$space_after - $space_before" | bc -l 2>/dev/null || echo "0")
    log_maintenance "SUCCESS" "Limpeza di√°ria: ${freed}GB libertados"
}

weekly_cleanup() {
    log_maintenance "INFO" "=== LIMPEZA SEMANAL ==="
    local space_before=$(get_free_space_gb)

    daily_cleanup

    apt autoremove -y --purge >/dev/null 2>&1
    apt clean >/dev/null 2>&1
    journalctl --vacuum-time=30d >/dev/null 2>&1

    find /tmp -type f -atime +14 -delete 2>/dev/null || true
    find /var/tmp -type f -atime +14 -delete 2>/dev/null || true

    if ! is_enterprise_docker; then
        docker_smart_cleanup moderate
    fi

    local space_after=$(get_free_space_gb)
    local freed=$(echo "$space_after - $space_before" | bc -l 2>/dev/null || echo "0")
    log_maintenance "SUCCESS" "Limpeza semanal: ${freed}GB libertados"
}

monthly_cleanup() {
    log_maintenance "INFO" "=== LIMPEZA MENSAL ==="
    local space_before=$(get_free_space_gb)

    weekly_cleanup

    journalctl --vacuum-time=60d >/dev/null 2>&1

    if ! is_enterprise_docker; then
        docker_smart_cleanup aggressive
    fi

    if command -v snap >/dev/null; then
        snap list --all | awk '/disabled/{print $1, $3}' | \
        while read snapname revision; do
            snap remove "$snapname" --revision="$revision" 2>/dev/null || true
        done
    fi

    local space_after=$(get_free_space_gb)
    local freed=$(echo "$space_after - $space_before" | bc -l 2>/dev/null || echo "0")
    log_maintenance "SUCCESS" "Limpeza mensal: ${freed}GB libertados"
}

monitor_disk_space() {
    local free_space=$(get_free_space_gb)
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')

    echo "${timestamp},${free_space}" >> "$STATS_LOG"

    if (( $(echo "$free_space < $ALERT_THRESHOLD_GB" | bc -l) )); then
        log_maintenance "ALERT" "‚ö†Ô∏è ESPA√áO BAIXO: ${free_space}GB restantes!"
        if command -v notify-send >/dev/null && [[ -n "${DISPLAY:-}" ]]; then
            notify-send "‚ö†Ô∏è Espa√ßo em Disco Baixo" "Restam apenas ${free_space}GB!" --urgency=critical 2>/dev/null || true
        fi
    fi
}

main() {
    case "${1:-daily}" in
        "daily") daily_cleanup; monitor_disk_space ;;
        "weekly") weekly_cleanup; monitor_disk_space ;;
        "monthly") monthly_cleanup; monitor_disk_space ;;
        "monitor") monitor_disk_space ;;
        *) echo "Uso: $0 {daily|weekly|monthly|monitor}"; exit 1 ;;
    esac
}

main "$@"
EOF

    sudo chmod +x /usr/local/bin/dev-maintenance.sh

    # Continuar com o resto da fun√ß√£o (cron jobs, scripts utilit√°rios, etc.)
    # Cron jobs
    echo "30 6 * * * root /usr/local/bin/dev-maintenance.sh daily" | sudo tee /etc/cron.d/dev-maintenance-daily > /dev/null
    echo "30 7 * * 0 root /usr/local/bin/dev-maintenance.sh weekly" | sudo tee /etc/cron.d/dev-maintenance-weekly > /dev/null
    echo "30 8 1-7 * 0 root /usr/local/bin/dev-maintenance.sh monthly" | sudo tee /etc/cron.d/dev-maintenance-monthly > /dev/null
    echo "0 */6 * * * root /usr/local/bin/dev-maintenance.sh monitor" | sudo tee /etc/cron.d/dev-maintenance-monitor > /dev/null

    # Configura√ß√£o
    sudo tee /etc/dev-maintenance.conf > /dev/null << 'EOF'
ALERT_THRESHOLD_GB=3
DESKTOP_NOTIFICATIONS=true
MAINTENANCE_LOG_RETENTION=90
EOF

    # SCRIPTS UTILIT√ÅRIOS MELHORADOS
    create_utility_scripts

    log "SUCCESS" "Sistema de manuten√ß√£o empresarial configurado!"
}

create_utility_scripts() {
    log "INFO" "Criando scripts utilit√°rios..."

    # Comando de limpeza
    sudo tee /usr/local/bin/dev-clean > /dev/null << 'EOF'
#!/bin/bash
case "${1:-status}" in
    "now")
        sudo /usr/local/bin/dev-maintenance.sh daily
        ;;
    "deep")
        sudo /usr/local/bin/dev-maintenance.sh weekly
        ;;
    "nuclear")
        sudo /usr/local/bin/dev-maintenance.sh monthly
        ;;
    "docker")
        docker system df 2>/dev/null
        echo "Use: dev-clean docker-light|docker-normal|docker-deep"
        ;;
    "docker-light")
        # Usar fun√ß√£o do script principal seria melhor, mas como workaround:
        docker container prune -f
        docker image prune -f
        ;;
    "docker-normal")
        docker container prune -f
        docker image prune -f
        docker builder prune --filter "until=168h" -f
        ;;
    "docker-deep")
        echo "‚ö†Ô∏è Remove TUDO exceto DBs. Continuar? (y/N)"
        read -r response
        if [[ "$response" =~ ^[Yy] ]]; then
            docker system prune -a -f --volumes
        fi
        ;;
    "status")
        echo "üíæ ESPA√áO: $(df -h / | awk 'NR==2 {print $4}') livres"
        echo "üìä USO: $(df -h / | awk 'NR==2 {print $5}') utilizado"
        docker system df 2>/dev/null || true
        ;;
    *)
        echo "üßπ LIMPEZA MELHORADA"
        echo "Uso: dev-clean {status|now|deep|nuclear|docker-*}"
        echo ""
        echo "  status      - Ver espa√ßo + Docker"
        echo "  now         - Daily + Docker light"
        echo "  deep        - Weekly + Docker normal"
        echo "  nuclear     - Monthly + Docker agressivo"
        echo "  docker-*    - Docker espec√≠fico"
        ;;
esac
EOF

    # Status do sistema
    sudo tee /usr/local/bin/dev-status > /dev/null << 'EOF'
#!/bin/bash
clear
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë                    LAPTOP EMPRESARIAL - STATUS                              ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo ""
echo "üíæ ESPA√áO EM DISCO:"
df -h / | awk 'NR==2 {
    used_pct = int($5)
    if (used_pct > 90) color = "üî¥"
    else if (used_pct > 80) color = "üü°"
    else color = "üü¢"
    printf "   %s %s usado de %s (%s livre)\n", color, $3, $2, $4
}'
echo ""
echo "üñ•Ô∏è SISTEMA:"
echo "   üìä RAM: $(free -h | awk '/^Mem:/{printf "%s usado de %s", $3, $2}')"
echo "   ‚ö° CPU: $(nproc) cores"
if [[ -f /sys/class/power_supply/BAT*/capacity ]]; then
    echo "   üîã Bateria: $(cat /sys/class/power_supply/BAT*/capacity | head -1)%"
fi
echo ""
echo "üõ†Ô∏è DESENVOLVIMENTO:"
if command -v node >/dev/null 2>&1; then
    echo "   ‚úÖ Node.js: $(node --version)"
else
    echo "   ‚ùå Node.js: N√£o dispon√≠vel"
fi
if command -v python3 >/dev/null 2>&1; then
    echo "   ‚úÖ Python: $(python3 --version | cut -d' ' -f2)"
else
    echo "   ‚ùå Python: N√£o dispon√≠vel"
fi
if command -v docker >/dev/null 2>&1; then
    echo "   ‚úÖ Docker: $(docker --version | cut -d' ' -f3 | tr -d ',')"
else
    echo "   ‚ùå Docker: N√£o dispon√≠vel"
fi
if command -v zsh >/dev/null 2>&1; then
    echo "   ‚úÖ Zsh: $(zsh --version | cut -d' ' -f2)"
    if [[ -d ~/.oh-my-zsh ]]; then
        echo "   ‚úÖ Oh-My-Zsh: Instalado"
    fi
else
    echo "   ‚ùå Zsh: N√£o dispon√≠vel"
fi
echo ""
echo "üìã COMANDOS:"
echo "   dev-tools            - Verificar ferramentas de desenvolvimento"
echo "   dev-clean now        - Limpeza r√°pida"
echo "   dev-clean status     - Ver espa√ßo detalhado"
echo "   dev-network-info     - Ver configura√ß√µes de rede"
echo "   dev-health           - Health check completo"
echo "   dev-benchmark        - Testar performance"
echo "   logs                 - Ver logs sistema"
echo ""
EOF

    # Network info
    sudo tee /usr/local/bin/dev-network-info > /dev/null << 'EOF'
#!/bin/bash
echo "üì∂ CONFIGURA√á√ïES DE REDE ATUAIS vs. PADR√ÉO UBUNTU"
echo ""

echo "üîç BUFFERS DE REDE:"
echo "   Receive default: $(cat /proc/sys/net/core/rmem_default) bytes (Ubuntu padr√£o: 212992)"
echo "   Receive max:     $(cat /proc/sys/net/core/rmem_max) bytes (Ubuntu padr√£o: 212992)"
echo "   Send default:    $(cat /proc/sys/net/core/wmem_default) bytes (Ubuntu padr√£o: 212992)"
echo "   Send max:        $(cat /proc/sys/net/core/wmem_max) bytes (Ubuntu padr√£o: 212992)"

echo ""
echo "üö¶ TCP CONFIGURA√á√ïES:"
echo "   Window scaling:  $(cat /proc/sys/net/ipv4/tcp_window_scaling) (padr√£o: 1)"
echo "   Timestamps:      $(cat /proc/sys/net/ipv4/tcp_timestamps) (padr√£o: 1)"
echo "   SACK:           $(cat /proc/sys/net/ipv4/tcp_sack) (padr√£o: 1)"
echo "   Congestion:     $(cat /proc/sys/net/ipv4/tcp_congestion_control)"

echo ""
echo "üìä TCP BUFFERS PER-CONNECTION:"
echo "   TCP rmem: $(cat /proc/sys/net/ipv4/tcp_rmem) (min default max)"
echo "   TCP wmem: $(cat /proc/sys/net/ipv4/tcp_wmem) (min default max)"

echo ""
echo "üí° AN√ÅLISE:"
current_rmem_max=$(cat /proc/sys/net/core/rmem_max)
if [[ $current_rmem_max -gt 500000 ]]; then
    echo "   ‚ö†Ô∏è Buffers de rede aumentados - pode consumir mais RAM"
    echo "   üìà Benef√≠cio: melhor throughput em redes r√°pidas/alta lat√™ncia"
    echo "   üíæ Custo: mais mem√≥ria por conex√£o TCP"
else
    echo "   ‚úÖ Buffers de rede padr√£o Ubuntu - conservador"
    echo "   üíæ Benef√≠cio: menor uso de RAM"
    echo "   üìä Limita√ß√£o: throughput limitado em redes muito r√°pidas"
fi

echo ""
echo "üîß PARA ALTERAR:"
echo "   ‚Ä¢ Reexecutar script de otimiza√ß√£o e escolher op√ß√£o de rede"
echo "   ‚Ä¢ Ou editar manualmente: /etc/sysctl.d/99-dev-performance-conservative.conf"
echo ""
EOF

    # Tools checker
    sudo tee /usr/local/bin/dev-tools > /dev/null << 'EOF'
#!/bin/bash
echo "üõ†Ô∏è FERRAMENTAS DE DESENVOLVIMENTO DISPON√çVEIS:"
echo ""

# Node.js ecosystem
if command -v node >/dev/null 2>&1; then
    echo "‚úÖ Node.js: $(node --version)"
    echo "‚úÖ npm: $(npm --version)"
else
    echo "‚ùå Node.js: N√£o instalado"
    echo "   üí° Instalar: curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash - && sudo apt install nodejs"
fi

if command -v yarn >/dev/null 2>&1; then
    echo "‚úÖ Yarn: $(yarn --version)"
else
    echo "‚ùå Yarn: N√£o instalado"
fi

echo ""

# Python ecosystem
if command -v python3 >/dev/null 2>&1; then
    echo "‚úÖ Python3: $(python3 --version | cut -d' ' -f2)"
else
    echo "‚ùå Python3: N√£o instalado"
fi

if command -v pip3 >/dev/null 2>&1; then
    echo "‚úÖ pip3: $(pip3 --version | cut -d' ' -f2)"
else
    echo "‚ùå pip3: N√£o instalado"
fi

echo ""

# Shell environment
if command -v zsh >/dev/null 2>&1; then
    echo "‚úÖ Zsh: $(zsh --version | cut -d' ' -f2)"
    if [[ -d ~/.oh-my-zsh ]]; then
        echo "‚úÖ Oh-My-Zsh: Instalado"
    else
        echo "‚ùå Oh-My-Zsh: N√£o instalado"
    fi
else
    echo "‚ùå Zsh: N√£o instalado"
fi

if command -v zoxide >/dev/null 2>&1; then
    echo "‚úÖ Zoxide: $(zoxide --version)"
else
    echo "‚ùå Zoxide: N√£o instalado"
fi

if command -v direnv >/dev/null 2>&1; then
    echo "‚úÖ Direnv: $(direnv --version)"
else
    echo "‚ùå Direnv: N√£o instalado"
fi

echo ""

# Build tools
if command -v gcc >/dev/null 2>&1; then
    echo "‚úÖ GCC: $(gcc --version | head -1 | awk '{print $4}')"
else
    echo "‚ùå GCC: N√£o instalado"
fi

if command -v make >/dev/null 2>&1; then
    echo "‚úÖ Make: Dispon√≠vel"
else
    echo "‚ùå Make: N√£o instalado"
fi

if command -v cmake >/dev/null 2>&1; then
    echo "‚úÖ CMake: $(cmake --version | head -1 | awk '{print $3}')"
else
    echo "‚ùå CMake: N√£o instalado"
fi

echo ""

# Git
if command -v git >/dev/null 2>&1; then
    echo "‚úÖ Git: $(git --version | awk '{print $3}')"
    if git config --global user.name >/dev/null 2>&1; then
        echo "   üë§ Configurado para: $(git config --global user.name)"
    else
        echo "   ‚ö†Ô∏è N√£o configurado (execute: git config --global user.name/user.email)"
    fi
else
    echo "‚ùå Git: N√£o instalado"
fi

echo ""

# Docker
if command -v docker >/dev/null 2>&1; then
    echo "‚úÖ Docker: $(docker --version | awk '{print $3}' | tr -d ',')"
    if groups $USER | grep -q docker; then
        echo "   üë§ Usu√°rio no grupo docker"
    else
        echo "   ‚ö†Ô∏è Usu√°rio n√£o est√° no grupo docker (execute: sudo usermod -aG docker $USER)"
    fi
else
    echo "‚ùå Docker: N√£o instalado"
fi

echo ""
echo "üí° Para instalar ferramentas em falta, execute novamente o script de otimiza√ß√£o"
echo ""
EOF

    # Health check
    sudo tee /usr/local/bin/dev-health > /dev/null << 'EOF'
#!/bin/bash
echo "üè• HEALTH CHECK COMPLETO DO LAPTOP EMPRESARIAL"
echo "=============================================="
echo ""

# Sistema base
echo "üñ•Ô∏è SISTEMA BASE:"
echo "   OS: $(lsb_release -d | cut -f2)"
echo "   Kernel: $(uname -r)"
echo "   Uptime: $(uptime -p)"
echo "   Load: $(uptime | awk -F'load average:' '{print $2}')"
echo ""

# Mem√≥ria
echo "üíæ MEM√ìRIA:"
free -h | grep -E "Mem:|Swap:"
echo ""

# Armazenamento
echo "üíø ARMAZENAMENTO:"
df -h | grep -E "Filesystem|/dev/"
echo ""

# Rede
echo "üì∂ REDE:"
ip addr show | grep -E "^[0-9]+:|inet " | grep -v "127.0.0.1"
echo ""

# Servi√ßos cr√≠ticos
echo "üîß SERVI√áOS:"
for service in ssh docker tlp systemd-resolved; do
    if systemctl is-active --quiet $service; then
        echo "   ‚úÖ $service: ativo"
    else
        echo "   ‚ùå $service: inativo"
    fi
done
echo ""

# Configura√ß√µes
echo "‚öôÔ∏è CONFIGURA√á√ïES:"
echo "   Sysctl config: $(ls /etc/sysctl.d/99-dev-performance-*.conf 2>/dev/null | wc -l) arquivos"
echo "   Limits config: $(ls /etc/security/limits.d/99-dev-*.conf 2>/dev/null | wc -l) arquivos"
echo "   Cron jobs: $(ls /etc/cron.d/dev-* 2>/dev/null | wc -l) jobs"
echo ""

# Alertas
echo "‚ö†Ô∏è ALERTAS:"
free_space=$(df / | awk 'NR==2 {print $4/1024/1024}')
if (( $(echo "$free_space < 5" | bc -l) )); then
    echo "   üî¥ Espa√ßo baixo: ${free_space}GB restantes"
else
    echo "   ‚úÖ Espa√ßo em disco OK"
fi

load_avg=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | tr -d ',')
if (( $(echo "$load_avg > 2" | bc -l) )); then
    echo "   üî¥ Load alto: $load_avg"
else
    echo "   ‚úÖ Load normal: $load_avg"
fi

echo ""
echo "üéØ PR√ìXIMAS A√á√ïES RECOMENDADAS:"
echo "   dev-benchmark     - Testar performance"
echo "   dev-clean deep    - Limpeza profunda"
echo "   logs | head -20   - Verificar logs recentes"
EOF

    # Benchmark
    sudo tee /usr/local/bin/dev-benchmark > /dev/null << 'EOF'
#!/bin/bash
echo "üöÄ BENCHMARK DO LAPTOP EMPRESARIAL"
echo "=================================="
echo ""

echo "‚è±Ô∏è TESTE CPU (10 segundos)..."
cpu_start=$(date +%s.%N)
timeout 10s yes > /dev/null
cpu_end=$(date +%s.%N)
echo "   ‚úÖ CPU stress test conclu√≠do"
echo ""

echo "üíæ TESTE MEM√ìRIA..."
mem_test=$(python3 -c "
import time
start = time.time()
data = [0] * (100000)
end = time.time()
print(f'{(end-start)*1000:.1f}ms')
" 2>/dev/null || echo "N/A")
echo "   ‚úÖ Aloca√ß√£o 100K elementos: $mem_test"
echo ""

echo "üíø TESTE DISCO (escrita 100MB)..."
disk_start=$(date +%s.%N)
dd if=/dev/zero of=/tmp/benchmark_test bs=1M count=100 2>/dev/null
sync
disk_end=$(date +%s.%N)
rm -f /tmp/benchmark_test
disk_time=$(echo "$disk_end - $disk_start" | bc -l | cut -c1-4)
disk_speed=$(echo "100 / $disk_time" | bc -l | cut -c1-5)
echo "   ‚úÖ Velocidade escrita: ${disk_speed}MB/s"
echo ""

echo "üì∂ TESTE REDE (ping + DNS)..."
ping_time=$(ping -c 3 8.8.8.8 | tail -1 | awk -F/ '{print $5}' | cut -c1-5)
dns_start=$(date +%s.%N)
nslookup google.com >/dev/null 2>&1
dns_end=$(date +%s.%N)
dns_time=$(echo "($dns_end - $dns_start) * 1000" | bc -l | cut -c1-5)
echo "   ‚úÖ Ping m√©dio: ${ping_time}ms"
echo "   ‚úÖ DNS lookup: ${dns_time}ms"
echo ""

echo "üìä RESUMO:"
echo "   üéØ Performance: $([ "${ping_time%.*}" -lt 50 ] && echo "Boa" || echo "Verificar rede")"
echo "   üíø Storage: $([ "${disk_speed%.*}" -gt 50 ] && echo "Bom" || echo "Lento")"
echo "   üîß Otimiza√ß√µes: Ativas"
EOF

    # Comparar com Ubuntu padr√£o
    sudo tee /usr/local/bin/dev-diff > /dev/null << 'EOF'
#!/bin/bash
echo "üîç DIFEREN√áAS vs. UBUNTU PADR√ÉO"
echo "==============================="
echo ""

echo "üîß KERNEL PARAMETERS:"
echo "   vm.swappiness: $(cat /proc/sys/vm/swappiness) (padr√£o: 60)"
echo "   vm.dirty_ratio: $(cat /proc/sys/vm/dirty_ratio) (padr√£o: 20)"
echo "   net.core.rmem_max: $(cat /proc/sys/net/core/rmem_max) (padr√£o: 212992)"
echo "   fs.inotify.max_user_watches: $(cat /proc/sys/fs/inotify/max_user_watches) (padr√£o: 8192)"
echo ""

echo "üìÅ ARQUIVOS DE CONFIGURA√á√ÉO:"
ls -la /etc/sysctl.d/99-dev-* 2>/dev/null || echo "   Nenhuma configura√ß√£o aplicada"
echo ""

echo "‚è∞ CRON JOBS:"
ls -la /etc/cron.d/dev-* 2>/dev/null || echo "   Nenhum job aplicado"
echo ""

echo "üõ†Ô∏è SCRIPTS UTILIT√ÅRIOS:"
ls -la /usr/local/bin/dev-* 2>/dev/null || echo "   Nenhum script aplicado"
echo ""

echo "üêö SHELL:"
echo "   Shell atual: $SHELL"
echo "   Zsh instalado: $(command -v zsh >/dev/null && echo "Sim" || echo "N√£o")"
echo "   Oh-My-Zsh: $([[ -d ~/.oh-my-zsh ]] && echo "Sim" || echo "N√£o")"
EOF

    # Tornar todos execut√°veis
    sudo chmod +x /usr/local/bin/dev-*

    log "SUCCESS" "Scripts utilit√°rios criados e configurados"
}

# =============================================================================
# DOCKER SMART CLEANUP - PRESERVA DBS
# =============================================================================

docker_smart_cleanup() {
    local mode="${1:-conservative}"

    if ! command -v docker >/dev/null 2>&1; then
        return 0
    fi

    # Detectar containers de DB
    local db_containers=$(docker ps -a --format "{{.Names}}" 2>/dev/null | grep -E "(postgres|mysql|mariadb|mongo|redis|elastic|cassandra|db|database)" || true)

    case "$mode" in
        "conservative")
            # Containers parados (exceto DBs)
            docker ps -a --filter "status=exited" --format "{{.Names}}" | while read container; do
                if [[ -n "$container" ]] && ! echo "$db_containers" | grep -q "^$container$"; then
                    docker rm "$container" 2>/dev/null || true
                fi
            done
            docker image prune -f >/dev/null 2>&1 || true
            ;;
        "moderate")
            docker_smart_cleanup conservative
            docker images --format "{{.Repository}}:{{.Tag}}" | while read image; do
                if [[ ! "$image" =~ (postgres|mysql|mariadb|mongo|redis|elastic|cassandra) ]]; then
                    if ! docker ps -a --format "{{.Image}}" | grep -q "^$image$"; then
                        docker rmi "$image" 2>/dev/null || true
                    fi
                fi
            done
            docker builder prune --filter "until=168h" -f >/dev/null 2>&1 || true
            ;;
        "aggressive")
            local db_volumes=$(docker volume ls --format "{{.Name}}" 2>/dev/null | grep -E "(data|postgres|mysql|mongo|redis|elastic|db)" || true)

            # Parar containers exceto DBs
            docker ps --format "{{.Names}}" | while read container; do
                if [[ -n "$container" ]] && ! echo "$db_containers" | grep -q "^$container$"; then
                    docker stop "$container" 2>/dev/null || true
                    docker rm "$container" 2>/dev/null || true
                fi
            done

            # Remover imagens exceto DBs
            docker images --format "{{.Repository}}:{{.Tag}}" | while read image; do
                if [[ ! "$image" =~ (postgres|mysql|mariadb|mongo|redis|elastic|cassandra) ]]; then
                    docker rmi "$image" 2>/dev/null || true
                fi
            done

            # Remover volumes exceto dados
            docker volume ls --format "{{.Name}}" | while read volume; do
                if [[ -n "$volume" ]] && ! echo "$db_volumes" | grep -q "^$volume$"; then
                    docker volume rm "$volume" 2>/dev/null || true
                fi
            done

            docker network prune -f >/dev/null 2>&1 || true
            docker builder prune -a -f >/dev/null 2>&1 || true
            ;;
    esac
}

# =============================================================================
# SISTEMA DE ATUALIZA√á√ÉO DE FERRAMENTAS MODERNAS
# =============================================================================

setup_tools_updater() {
    log "INFO" "Configurando sistema de atualiza√ß√£o de ferramentas..."

    # Script para atualizar ferramentas modernas
    sudo tee /usr/local/bin/dev-update-tools > /dev/null << 'EOF'
#!/bin/bash
# Atualizar ferramentas modernas de desenvolvimento

echo "üîÑ ATUALIZANDO FERRAMENTAS DE DESENVOLVIMENTO"
echo ""

# Atualizar fzf
if [[ -d ~/.fzf ]]; then
    echo "üì¶ Atualizando fzf..."
    cd ~/.fzf && git pull && ./install --key-bindings --completion --no-update-rc
fi

# Atualizar lazygit
if command -v lazygit >/dev/null 2>&1; then
    echo "üì¶ Verificando lazygit..."
    current_version=$(lazygit --version | head -1 | awk '{print $3}' | tr -d ',')
    latest_version=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*' 2>/dev/null)

    if [[ "$current_version" != "$latest_version" ]] && [[ -n "$latest_version" ]]; then
        echo "üîÑ Atualizando lazygit: $current_version ‚Üí $latest_version"
        curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${latest_version}_Linux_x86_64.tar.gz" 2>/dev/null
        tar xf lazygit.tar.gz lazygit 2>/dev/null
        sudo install lazygit /usr/local/bin 2>/dev/null
        rm -f lazygit.tar.gz lazygit
    else
        echo "‚úÖ lazygit j√° est√° atualizado"
    fi
fi

# Atualizar Node.js tools globais
if command -v npm >/dev/null 2>&1; then
    echo "üì¶ Atualizando ferramentas Node.js globais..."
    npm update -g 2>/dev/null || true
fi

# Atualizar Python tools
if command -v pip3 >/dev/null 2>&1; then
    echo "üì¶ Atualizando ferramentas Python..."
    pip3 install --upgrade pip setuptools wheel 2>/dev/null || true
    if command -v tldr >/dev/null 2>&1; then
        pip3 install --upgrade tldr 2>/dev/null || true
    fi
fi

# Atualizar Rust tools se cargo dispon√≠vel
if command -v cargo >/dev/null 2>&1; then
    echo "üì¶ Atualizando ferramentas Rust..."
    if command -v exa >/dev/null 2>&1; then
        cargo install exa --force 2>/dev/null || true
    fi
fi

echo ""
echo "‚úÖ Atualiza√ß√£o de ferramentas conclu√≠da"
EOF

    sudo chmod +x /usr/local/bin/dev-update-tools

    # Adicionar ao cron mensal
    echo "0 3 15 * * root /usr/local/bin/dev-update-tools >> /var/log/dev-tools-update.log 2>&1" | sudo tee /etc/cron.d/dev-tools-update > /dev/null

    log "SUCCESS" "Sistema de atualiza√ß√£o de ferramentas configurado (execu√ß√£o mensal)"
}

# =============================================================================
# CPU GOVERNOR INTELIGENTE
# =============================================================================

configure_cpu_governor() {
    if ask_user "Configurar CPU governor inteligente (balanceado AC / powersave bateria)?" "y"; then
        log "INFO" "Configurando CPU governor inteligente..."

        # Script para ajustar governor baseado na fonte de energia
        sudo tee /usr/local/bin/cpu-governor-smart > /dev/null << 'EOF'
#!/bin/bash
# Ajuste inteligente do CPU governor (laptop-friendly)

# Detectar se est√° na bateria ou AC
if [[ -f /sys/class/power_supply/ADP*/online ]]; then
    ac_online=$(cat /sys/class/power_supply/ADP*/online 2>/dev/null | head -1)
elif [[ -f /sys/class/power_supply/AC*/online ]]; then
    ac_online=$(cat /sys/class/power_supply/AC*/online 2>/dev/null | head -1)
else
    ac_online=1  # Assumir AC se n√£o conseguir detectar
fi

# Ajustar governor (LAPTOP-FRIENDLY)
if [[ "$ac_online" == "1" ]]; then
    # AC plugged - ONDEMAND (n√£o performance!)
    echo "ondemand" | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor >/dev/null 2>&1
    echo "CPU Governor: ondemand (AC conectado - thermal-friendly)"
else
    # Battery - powersave
    echo "powersave" | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor >/dev/null 2>&1
    echo "CPU Governor: powersave (bateria)"
fi
EOF

        sudo chmod +x /usr/local/bin/cpu-governor-smart

        # Executar na startup e quando muda fonte de energia
        sudo tee /etc/systemd/system/cpu-governor-smart.service > /dev/null << 'EOF'
[Unit]
Description=Smart CPU Governor
After=multi-user.target

[Service]
Type=oneshot
ExecStart=/usr/local/bin/cpu-governor-smart
RemainAfterExit=true

[Install]
WantedBy=multi-user.target
EOF

        # Udev rule para executar quando mudar fonte de energia
        sudo tee /etc/udev/rules.d/99-cpu-governor.rules > /dev/null << 'EOF'
SUBSYSTEM=="power_supply", ATTR{online}=="0", RUN+="/usr/local/bin/cpu-governor-smart"
SUBSYSTEM=="power_supply", ATTR{online}=="1", RUN+="/usr/local/bin/cpu-governor-smart"
EOF

        sudo systemctl enable cpu-governor-smart.service
        sudo udevadm control --reload-rules

        log "SUCCESS" "CPU governor inteligente configurado (laptop-friendly)"
        log "INFO" "Ondemand quando AC conectado, powersave na bateria"
    fi
}

# =============================================================================
# FUN√á√ïES UTILIT√ÅRIAS
# =============================================================================

log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')

    echo -e "${timestamp} [${level}] ${message}" | tee -a "$LOG_FILE"

    case "$level" in
        "INFO")    echo -e "${BLUE}‚Ñπ${NC} ${message}" ;;
        "SUCCESS") echo -e "${GREEN}‚úÖ${NC} ${message}" ;;
        "WARNING") echo -e "${YELLOW}‚ö†${NC} ${message}" ;;
        "ERROR")   echo -e "${RED}‚ùå${NC} ${message}" ;;
    esac
}

command_exists() {
    command -v "$1" >/dev/null 2>&1
}

ask_user() {
    local question="$1"
    local default="${2:-n}"
    local response

    read -p "$(echo -e "${YELLOW}?${NC} ${question} [${default}]: ")" response
    response=${response:-$default}
    [[ "$response" =~ ^[Yy]([Ee][Ss])?$ ]]
}

create_backup() {
    log "INFO" "Criando backup de configura√ß√µes..."
    mkdir -p "$BACKUP_DIR"

    local backup_files=(
        "/etc/sysctl.conf"
        "/etc/fstab"
        "/etc/security/limits.conf"
    )

    for file in "${backup_files[@]}"; do
        [[ -f "$file" ]] && cp "$file" "$BACKUP_DIR/"
    done

    [[ -d /etc/sysctl.d/ ]] && cp -r /etc/sysctl.d/ "$BACKUP_DIR/"
    [[ -d /etc/security/limits.d/ ]] && cp -r /etc/security/limits.d/ "$BACKUP_DIR/"

    # Criar script de rollback
    create_rollback_script

    log "SUCCESS" "Backup criado em: $BACKUP_DIR"
}

create_rollback_script() {
    cat > "$BACKUP_DIR/rollback.sh" << EOF
#!/bin/bash
# Script de rollback autom√°tico
# Criado: $(date)

echo "üîÑ EXECUTANDO ROLLBACK..."

# Restaurar arquivos de configura√ß√£o
[[ -f sysctl.conf ]] && sudo cp sysctl.conf /etc/
[[ -f fstab ]] && sudo cp fstab /etc/
[[ -f limits.conf ]] && sudo cp limits.conf /etc/security/

# Remover configura√ß√µes adicionadas
sudo rm -f /etc/sysctl.d/99-dev-performance-*.conf
sudo rm -f /etc/security/limits.d/99-dev-*.conf
sudo rm -f /etc/cron.d/dev-*
sudo rm -f /usr/local/bin/dev-*

# Recarregar configura√ß√µes
sudo sysctl --system
sudo systemctl daemon-reload

echo "‚úÖ Rollback conclu√≠do!"
echo "üîÑ Reinicie o sistema para aplicar completamente"
EOF

    chmod +x "$BACKUP_DIR/rollback.sh"

    # Criar comando de rollback global
    sudo tee /usr/local/bin/dev-rollback > /dev/null << EOF
#!/bin/bash
if [[ -z "\$1" ]]; then
    echo "Uso: dev-rollback <backup_directory>"
    echo "Backups dispon√≠veis:"
    ls -la ~/.ubuntu-dev-backup-* 2>/dev/null | tail -5
    exit 1
fi

if [[ -f "\$1/rollback.sh" ]]; then
    cd "\$1"
    ./rollback.sh
else
    echo "Script de rollback n√£o encontrado em \$1"
    exit 1
fi
EOF

    sudo chmod +x /usr/local/bin/dev-rollback
}

# =============================================================================
# FUN√á√ÉO PRINCIPAL
# =============================================================================

main() {
    clear
    echo "
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë          UBUNTU LAPTOP OPTIMIZER - VERS√ÉO EMPRESARIAL MELHORADA             ‚ïë
‚ïë                    üÜï ZSH + OH-MY-ZSH + ZOXIDE + DIRENV üÜï                   ‚ïë
‚ïë                    üõ°Ô∏è VERIFICA√á√ÉO DE CONFLITOS EMPRESARIAIS üõ°Ô∏è               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"

    log "INFO" "üÜï NOVAS FUNCIONALIDADES:"
    log "INFO" "   ‚Ä¢ Zsh + Oh-My-Zsh + plugins inteligentes"
    log "INFO" "   ‚Ä¢ Zoxide (cd inteligente baseado em frequ√™ncia)"
    log "INFO" "   ‚Ä¢ Direnv (ambientes por diret√≥rio)"
    log "INFO" "   ‚Ä¢ Verifica√ß√£o de conflitos VPN/Docker/SSH"
    log "WARNING" "‚ö†Ô∏è Script vai verificar conflitos empresariais antes de aplicar mudan√ßas"
    echo ""

    # Verifica√ß√µes iniciais
    check_prerequisites

    if ! ask_user "Continuar com otimiza√ß√µes melhoradas?" "y"; then
        log "INFO" "Opera√ß√£o cancelada."
        exit 0
    fi

    # NOVA: Verificar conflitos empresariais ANTES de qualquer mudan√ßa
    check_enterprise_conflicts

    # Detectar sistema
    detect_system_specs

    # Criar backup
    create_backup

    # Aplicar otimiza√ß√µes
    log "INFO" "Aplicando otimiza√ß√µes baseadas na verifica√ß√£o de conflitos..."

    # Kernel sempre seguro
    optimize_kernel_conservative

    # Storage e laptop
    optimize_storage_advanced
    # configure_laptop_optimizations # √© bom para preservar o laptop, ssd e bateria

    # Development limits sempre seguros
    optimize_development_limits

    # Seguran√ßa (considerando conflitos detectados)
    configure_advanced_security

    # Configura√ß√µes de produtividade (incluindo ZSH se escolhido)
    configure_productivity_basics

    # Verificar ambiente e instalar ferramentas (INCLUINDO ZSH)
    check_development_environment
    install_development_essentials

    # Git
    configure_git_basics

    # GNOME (com verifica√ß√µes empresariais)
    optimize_gnome_minimalist

    # Aliases inteligentes
    configure_smart_dev_aliases

    # Docker (com verifica√ß√µes)
    configure_docker_enterprise

    # Sistema de manuten√ß√£o
    setup_enterprise_maintenance

    # Configurar sistema de atualiza√ß√£o de ferramentas
    setup_tools_updater

    # Configurar CPU governor inteligente
    configure_cpu_governor

    # Relat√≥rio final
    echo "
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        LAPTOP EMPRESARIAL OTIMIZADO                         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üñ•Ô∏è SISTEMA ANALISADO:
   ‚Ä¢ RAM: ${RAM_GB}GB
   ‚Ä¢ CPU: ${CPU_CORES} cores
   ‚Ä¢ Armazenamento: ${STORAGE_TYPE^^}

‚ö° OTIMIZA√á√ïES APLICADAS:
   ‚Ä¢ üîß Kernel conservador para estabilidade
   ‚Ä¢ üîã TLP para gest√£o inteligente de bateria
   ‚Ä¢ üíæ Prote√ß√£o de SSD (journald limitado, TRIM autom√°tico)
   ‚Ä¢ üîí Seguran√ßa avan√ßada (firewall, fail2ban, AppArmor, updates autom√°ticos)
   ‚Ä¢ üñ•Ô∏è Terminal GNOME otimizado para logs ($([ $RAM_GB -ge 16 ] && echo "100K" || echo "50K") linhas)
   ‚Ä¢ üé® GNOME: $(gsettings get org.gnome.desktop.interface enable-animations 2>/dev/null | grep -q false && echo "Minimalista conservador (sem anima√ß√µes, tema dark, touchpad otimizado)" || echo "B√°sico (apenas terminal otimizado)")
   ‚Ä¢ üì∂ Network: $(grep -q "rmem_max=2097152" /etc/sysctl.d/99-dev-performance-conservative.conf 2>/dev/null && echo "Otimizado (buffers 2MB)" || echo "Padr√£o Ubuntu (conservador)")
   ‚Ä¢ üõ†Ô∏è Ferramentas de desenvolvimento verificadas/instaladas
   ‚Ä¢ ‚öôÔ∏è Configura√ß√µes produtividade (vim, bash history, SSH client, DNS, locale)
   ‚Ä¢ üßπ Sistema de manuten√ß√£o autom√°tico com monitoriza√ß√£o
   ‚Ä¢ üîÑ Sistema de rollback completo criado
   ‚Ä¢ üîã CPU governor inteligente (performance AC / powersave bateria)
   ‚Ä¢ üì¶ Sistema de atualiza√ß√£o autom√°tica de ferramentas
   ‚Ä¢ üêö Zsh + Oh-My-Zsh + Zoxide + Direnv (se escolhido)

üõ†Ô∏è FERRAMENTAS DE DESENVOLVIMENTO:
   ‚Ä¢ Node.js e npm (LTS se instalado)
   ‚Ä¢ Python3 e pip3 + venv
   ‚Ä¢ Git (configurado se necess√°rio)
   ‚Ä¢ Build tools (gcc, make, cmake)
   ‚Ä¢ Docker (opcional)
   ‚Ä¢ Yarn (se Node.js presente)
   ‚Ä¢ Zsh + Oh-My-Zsh + plugins (se escolhido)
   ‚Ä¢ Zoxide (cd inteligente - se escolhido)
   ‚Ä¢ Direnv (ambiente por diret√≥rio - se escolhido)
   ‚Ä¢ Ferramentas modernas: fzf, fd, bat, exa (se escolhidas)
   ‚Ä¢ Ferramentas √∫teis: ncdu, tldr, httpie, gh, glow, lazygit, meld (se escolhidas)
   ‚Ä¢ Seguran√ßa: fail2ban, lynis (se SSH ativo)
   ‚Ä¢ Sistema: ripgrep, multitail, shellcheck, lsof, pstree, debsums

üéØ COMANDOS DISPON√çVEIS:
   ‚Ä¢ dev-status           - Dashboard do laptop
   ‚Ä¢ dev-tools            - Verificar ferramentas de desenvolvimento
   ‚Ä¢ dev-clean now        - Limpeza r√°pida
   ‚Ä¢ dev-clean status     - Ver espa√ßo em disco
   ‚Ä¢ dev-health           - Health check completo
   ‚Ä¢ dev-benchmark        - Testar performance
   ‚Ä¢ dev-network-info     - Ver configura√ß√µes de rede
   ‚Ä¢ dev-diff             - Ver diferen√ßas vs Ubuntu padr√£o
   ‚Ä¢ dev-rollback <dir>   - Fazer rollback de configura√ß√µes
   ‚Ä¢ logs                 - Ver logs do sistema (journalctl -f)
   ‚Ä¢ logsearch <termo>    - Procurar nos logs
   ‚Ä¢ diskwatch            - Monitorar espa√ßo em tempo real

üîÑ PR√ìXIMOS PASSOS IMPORTANTES:
   1. üîÑ REINICIAR: sudo reboot
   2. üîß Finalizar GRUB: sudo update-grub (se zswap foi configurado)
   3. ‚úÖ Testar sistema: dev-health
   4. üõ†Ô∏è Verificar ferramentas: dev-tools
   5. üì∂ Ver configura√ß√µes: dev-network-info
   6. üéØ Benchmark: dev-benchmark
   7. üîç Ver diferen√ßas: dev-diff

üìÅ BACKUP E ROLLBACK:
   ‚Ä¢ Backup criado em: $BACKUP_DIR
   ‚Ä¢ Script de rollback: $BACKUP_DIR/rollback.sh
   ‚Ä¢ Comando de rollback: dev-rollback $BACKUP_DIR

üí° CONFIGURA√á√ïES N√ÉO INCLU√çDAS (fa√ßa depois se desejar):
   ‚Ä¢ IDEs e editores espec√≠ficos (VS Code, JetBrains)
   ‚Ä¢ Node.js/Python environments (nvm, pyenv) - mas ferramentas base est√£o prontas

üîí SOBRE SEGURAN√áA AVAN√áADA:
   ‚Ä¢ Firewall UFW configurado com regras inteligentes
   ‚Ä¢ Fail2ban ativo se SSH detectado (prote√ß√£o contra ataques)
   ‚Ä¢ AppArmor otimizado com perfis adicionais
   ‚Ä¢ Updates de seguran√ßa autom√°ticos melhorados
   ‚Ä¢ SSH hardening avan√ßado aplicado
   ‚Ä¢ Auditoria de seguran√ßa mensal autom√°tica (Lynis)
   ‚Ä¢ Monitoriza√ß√£o de vulnerabilidades ativa

üíæ SOBRE OTIMIZA√á√ïES SSD:
   ‚Ä¢ TRIM autom√°tico configurado e ativo
   ‚Ä¢ I/O scheduler otimizado por tipo de storage (none/mq-deadline)
   ‚Ä¢ Read-ahead ajustado (NVMe: 512, SSD: 256, HDD: 128)
   ‚Ä¢ Swapfile inteligente criada se necess√°rio
   ‚Ä¢ Journald limitado para proteger SSD

üêö SOBRE ZSH + OH-MY-ZSH (se escolhido):
   ‚Ä¢ Zsh configurado como shell padr√£o
   ‚Ä¢ Oh-My-Zsh com plugins para desenvolvimento
   ‚Ä¢ Plugins: git, docker, node, npm, yarn, python, autosuggestions, syntax-highlighting
   ‚Ä¢ Zoxide: navega√ß√£o inteligente com 'z <diret√≥rio>'
   ‚Ä¢ Direnv: ambientes autom√°ticos por diret√≥rio (.envrc)
   ‚Ä¢ Hist√≥rico melhorado: 50K comandos com timestamps
   ‚Ä¢ Aliases produtivos j√° configurados
   ‚Ä¢ Completion melhorado com fzf-tab

‚öôÔ∏è SOBRE CONFIGURA√á√ïES DE PRODUTIVIDADE:
   ‚Ä¢ Vim configurado com syntax highlighting, n√∫meros de linha, atalhos √∫teis
   ‚Ä¢ Bash/Zsh history melhorado (50K linhas, timestamps, pesquisa fuzzy se fzf)
   ‚Ä¢ SSH client otimizado (compress√£o, multiplexing, timeouts)
   ‚Ä¢ Locale e timezone configurados para Portugal
   ‚Ä¢ DNS otimizado (CloudFlare + Google para velocidade) - se n√£o h√° conflitos
   ‚Ä¢ Logrotate personalizado para logs de desenvolvimento

üõ°Ô∏è SOBRE VERIFICA√á√ïES DE CONFLITOS EMPRESARIAIS:
   ‚Ä¢ VPN: Detecta VPN ativa e pergunta antes de alterar DNS/rede
   ‚Ä¢ Docker: Verifica impacto em bridge networks e volumes
   ‚Ä¢ SSH: Respeita configura√ß√µes empresariais existentes
   ‚Ä¢ Firewall: Mant√©m regras empresariais se muitas existirem
   ‚Ä¢ DNS: Preserva DNS empresariais se detectados
   ‚Ä¢ Valores padr√£o sempre seguros para ambiente corporativo

üì∂ SOBRE CONFIGURA√á√ïES DE REDE:
   ‚Ä¢ Script pergunta se quer otimiza√ß√µes de rede (opcional)
   ‚Ä¢ SEM otimiza√ß√µes: mant√©m padr√£o Ubuntu (mais est√°vel, menos RAM)
   ‚Ä¢ COM otimiza√ß√µes: buffers 2MB vs. 212KB padr√£o (melhor performance, mais RAM)
   ‚Ä¢ BBR congestion control ativado automaticamente se suportado
   ‚Ä¢ Use 'dev-network-info' ap√≥s reiniciar para ver configura√ß√µes ativas

üîÑ SOBRE O SISTEMA DE ROLLBACK:
   ‚Ä¢ Backup completo criado automaticamente antes de qualquer mudan√ßa
   ‚Ä¢ Script de rollback autom√°tico em cada backup
   ‚Ä¢ Comando 'dev-rollback <backup_dir>' para restaurar sistema
   ‚Ä¢ Manifesto detalhado de cada backup
   ‚Ä¢ Possibilidade de restaurar estado completamente anterior
"

    # Verificar se GRUB precisa update
    if grep -q "zswap.enabled" /etc/default/grub; then
        echo ""
        echo -e "${YELLOW}‚ö†Ô∏è IMPORTANTE:${NC} Execute ap√≥s reiniciar:"
        echo -e "   ${GREEN}sudo update-grub${NC}"
    fi

    log "SUCCESS" "üéâ Sistema otimizado inteligentemente com todas as melhorias!"

    if [[ -d ~/.oh-my-zsh ]]; then
        echo ""
        echo -e "${GREEN}üêö ZSH INSTALADO:${NC} Fa√ßa logout/login para ativar o Zsh"
        echo -e "${GREEN}üí° COMANDOS ZSH:${NC}"
        echo -e "   z <diret√≥rio>     # Navega√ß√£o inteligente"
        echo -e "   nodesetup <nome>  # Criar projeto Node.js"
        echo -e "   cleannode         # Limpar node_modules"
        echo -e "   testapi <url>     # Testar APIs"
    fi

    echo ""
    echo -e "${GREEN}üöÄ PR√ìXIMO PASSO: sudo reboot${NC}"
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
