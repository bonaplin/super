#!/bin/bash
# =============================================================================
# LAPTOP OPTIMIZER - SCRIPT PRINCIPAL MODULAR
# Vers√£o: 4.0 - Abordagem H√≠brida (Comunidade + Personalizado)
# =============================================================================

set -euo pipefail

# Diret√≥rios e configura√ß√£o
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly VERSION="4.0-modular"
readonly CONFIG_FILE="$SCRIPT_DIR/config/settings.conf"

# Carregar bibliotecas
source "$SCRIPT_DIR/lib/colors.sh"
source "$SCRIPT_DIR/lib/common.sh"
source "$SCRIPT_DIR/lib/validation.sh"

# =============================================================================
# MENU PRINCIPAL
# =============================================================================

show_main_menu() {
    clear
    echo -e "${BLUE}
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë               üöÄ LAPTOP OPTIMIZER v${VERSION} - H√çBRIDO                        ‚ïë
‚ïë                                                                              ‚ïë
‚ïë  üéØ ESTRAT√âGIA: Ferramentas Comunidade + Configura√ß√µes √önicas               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
${NC}"

    echo ""
    echo -e "${GREEN}üìã OP√á√ïES PRINCIPAIS:${NC}"
    echo ""
    echo -e "  ${YELLOW}1.${NC} üåç Instalar ferramentas da comunidade ${BLUE}(TLP, auto-cpufreq, preload)${NC}"
    echo -e "  ${YELLOW}2.${NC} üè¢ Verificar conflitos empresariais ${BLUE}(VPN, Docker, SSH)${NC}"
    echo -e "  ${YELLOW}3.${NC} üõ†Ô∏è  Configura√ß√µes para desenvolvimento ${BLUE}(inotify, limits, aliases)${NC}"
    echo -e "  ${YELLOW}4.${NC} üßπ Sistema de manuten√ß√£o inteligente ${BLUE}(limpeza autom√°tica)${NC}"
    echo -e "  ${YELLOW}5.${NC} ‚ö° Scripts utilit√°rios pr√°ticos ${BLUE}(dev-status, dev-clean)${NC}"
    echo -e "  ${YELLOW}6.${NC} üê≥ Docker cleanup inteligente ${BLUE}(preserva DBs)${NC}"
    echo -e "  ${YELLOW}7.${NC} üîß Apenas otimiza√ß√µes essenciais ${BLUE}(m√≠nimo seguro)${NC}"
    echo ""
    echo -e "${GREEN}üöÄ OP√á√ïES COMPLETAS:${NC}"
    echo ""
    echo -e "  ${YELLOW}8.${NC} üéØ Otimiza√ß√£o completa recomendada ${BLUE}(todas as op√ß√µes)${NC}"
    echo -e "  ${YELLOW}9.${NC} üè¢ Modo empresarial conservador ${BLUE}(m√°xima compatibilidade)${NC}"
    echo ""
    echo -e "${GREEN}üìä INFORMA√á√ÉO:${NC}"
    echo ""
    echo -e "  ${YELLOW}s.${NC} üìä Status atual do sistema"
    echo -e "  ${YELLOW}t.${NC} üß™ Testar otimiza√ß√µes existentes"
    echo -e "  ${YELLOW}h.${NC} ‚ùì Ajuda e documenta√ß√£o"
    echo -e "  ${YELLOW}q.${NC} üö™ Sair"
    echo ""
    
    read -p "$(echo -e "${CYAN}Escolha uma op√ß√£o:${NC} ")" choice
    handle_menu_choice "$choice"
}

handle_menu_choice() {
    local choice="$1"
    
    case "$choice" in
        1) install_community_tools ;;
        2) run_enterprise_check ;;
        3) configure_development ;;
        4) setup_maintenance ;;
        5) install_utilities ;;
        6) setup_docker_cleanup ;;
        7) apply_essential_only ;;
        8) run_complete_optimization ;;
        9) run_enterprise_mode ;;
        s|S) show_system_status ;;
        t|T) test_optimizations ;;
        h|H) show_help ;;
        q|Q) exit 0 ;;
        *) 
            echo -e "${RED}‚ùå Op√ß√£o inv√°lida: $choice${NC}"
            sleep 2
            show_main_menu
            ;;
    esac
}

# =============================================================================
# FUN√á√ïES PRINCIPAIS (DELEGAM PARA M√ìDULOS)
# =============================================================================

install_community_tools() {
    log_header "üåç INSTALANDO FERRAMENTAS DA COMUNIDADE"
    
    if confirm "Instalar ferramentas da comunidade (TLP, auto-cpufreq, preload, earlyoom)?" "y"; then
        "$SCRIPT_DIR/install-community-tools.sh"
        
        log_success "Ferramentas da comunidade instaladas!"
        echo ""
        echo -e "${BLUE}üí° PR√ìXIMOS PASSOS:${NC}"
        echo "   ‚Ä¢ Reiniciar para ativar TLP e auto-cpufreq"
        echo "   ‚Ä¢ Verificar: sudo tlp-stat"
        echo "   ‚Ä¢ Verificar: sudo auto-cpufreq --stats"
        pause_and_return
    fi
}

run_enterprise_check() {
    log_header "üè¢ VERIFICA√á√ÉO DE CONFLITOS EMPRESARIAIS"
    
    source "$SCRIPT_DIR/modules/enterprise-conflicts.sh"
    
    echo -e "${BLUE}üîç Esta verifica√ß√£o vai detectar:${NC}"
    echo "   ‚Ä¢ VPN ativo (conflitos DNS/rede)"
    echo "   ‚Ä¢ Configura√ß√µes Docker empresariais"
    echo "   ‚Ä¢ Pol√≠ticas SSH da empresa"
    echo "   ‚Ä¢ DNS e firewall mandat√≥rios"
    echo ""
    
    if confirm "Executar verifica√ß√£o empresarial?" "y"; then
        check_enterprise_conflicts
        pause_and_return
    fi
}

configure_development() {
    log_header "üõ†Ô∏è CONFIGURA√á√ïES PARA DESENVOLVIMENTO"
    
    source "$SCRIPT_DIR/modules/development-config.sh"
    
    echo -e "${BLUE}üîß Configura√ß√µes a aplicar:${NC}"
    echo "   ‚Ä¢ Aumentar inotify watches (cr√≠tico para IDEs)"
    echo "   ‚Ä¢ Configurar limits para file descriptors"
    echo "   ‚Ä¢ Aliases inteligentes para desenvolvimento"
    echo "   ‚Ä¢ Configura√ß√£o Git b√°sica"
    echo "   ‚Ä¢ Bash/Zsh history melhorado"
    echo ""
    
    if confirm "Aplicar configura√ß√µes de desenvolvimento?" "y"; then
        apply_development_config
        pause_and_return
    fi
}

setup_maintenance() {
    log_header "üßπ SISTEMA DE MANUTEN√á√ÉO INTELIGENTE"
    
    source "$SCRIPT_DIR/modules/smart-maintenance.sh"
    
    echo -e "${BLUE}üîß Sistema de manuten√ß√£o inclui:${NC}"
    echo "   ‚Ä¢ Limpeza autom√°tica di√°ria/semanal/mensal"
    echo "   ‚Ä¢ Monitoriza√ß√£o de espa√ßo em disco"
    echo "   ‚Ä¢ Alertas quando espa√ßo baixo"
    echo "   ‚Ä¢ Limpeza Docker inteligente (preserva DBs)"
    echo "   ‚Ä¢ Logs estruturados"
    echo ""
    
    if confirm "Instalar sistema de manuten√ß√£o?" "y"; then
        setup_smart_maintenance
        pause_and_return
    fi
}

install_utilities() {
    log_header "‚ö° SCRIPTS UTILIT√ÅRIOS PR√ÅTICOS"
    
    source "$SCRIPT_DIR/modules/utility-scripts.sh"
    
    echo -e "${BLUE}üõ†Ô∏è Scripts a instalar:${NC}"
    echo "   ‚Ä¢ dev-status    - Dashboard do sistema"
    echo "   ‚Ä¢ dev-clean     - Limpeza inteligente"
    echo "   ‚Ä¢ dev-health    - Health check completo"
    echo "   ‚Ä¢ dev-tools     - Verificar ferramentas instaladas"
    echo "   ‚Ä¢ dev-benchmark - Testar performance"
    echo ""
    
    if confirm "Instalar scripts utilit√°rios?" "y"; then
        create_utility_scripts
        pause_and_return
    fi
}

setup_docker_cleanup() {
    log_header "üê≥ DOCKER CLEANUP INTELIGENTE"
    
    if ! command -v docker >/dev/null 2>&1; then
        log_warning "Docker n√£o instalado - skip"
        pause_and_return
        return
    fi
    
    source "$SCRIPT_DIR/modules/docker-cleanup.sh"
    
    echo -e "${BLUE}üîß Limpeza Docker inteligente:${NC}"
    echo "   ‚Ä¢ Detecta automaticamente containers de BD"
    echo "   ‚Ä¢ Remove apenas containers/imagens n√£o-BD"
    echo "   ‚Ä¢ Preserva volumes com dados importantes"
    echo "   ‚Ä¢ Tr√™s modos: conservador, moderado, agressivo"
    echo ""
    
    if confirm "Configurar Docker cleanup inteligente?" "y"; then
        setup_smart_docker_cleanup
        pause_and_return
    fi
}

apply_essential_only() {
    log_header "üîß APENAS OTIMIZA√á√ïES ESSENCIAIS"
    
    source "$SCRIPT_DIR/modules/essential-tweaks.sh"
    
    echo -e "${BLUE}üéØ Otimiza√ß√µes m√≠nimas e seguras:${NC}"
    echo "   ‚Ä¢ vm.swappiness=10 (menos swap)"
    echo "   ‚Ä¢ inotify watches aumentado"
    echo "   ‚Ä¢ TLP para gest√£o de energia"
    echo "   ‚Ä¢ TRIM autom√°tico para SSD"
    echo ""
    
    if confirm "Aplicar apenas essenciais?" "y"; then
        apply_essential_tweaks
        pause_and_return
    fi
}

run_complete_optimization() {
    log_header "üöÄ OTIMIZA√á√ÉO COMPLETA"
    
    echo -e "${BLUE}üéØ Otimiza√ß√£o completa inclui:${NC}"
    echo "   1. Verifica√ß√£o de conflitos empresariais"
    echo "   2. Backup autom√°tico do sistema"
    echo "   3. Instala√ß√£o de ferramentas da comunidade"
    echo "   4. Configura√ß√µes para desenvolvimento"
    echo "   5. Sistema de manuten√ß√£o autom√°tico"
    echo "   6. Scripts utilit√°rios pr√°ticos"
    echo ""
    echo -e "${YELLOW}‚è±Ô∏è Tempo estimado: 10-15 minutos${NC}"
    echo ""
    
    if confirm "Executar otimiza√ß√£o completa?" "y"; then
        run_full_optimization
    fi
}

run_enterprise_mode() {
    log_header "üè¢ MODO EMPRESARIAL CONSERVADOR"
    
    echo -e "${BLUE}üõ°Ô∏è Modo empresarial:${NC}"
    echo "   ‚Ä¢ Verifica√ß√£o extensiva de conflitos"
    echo "   ‚Ä¢ Apenas mudan√ßas conservadoras"
    echo "   ‚Ä¢ Backup obrigat√≥rio"
    echo "   ‚Ä¢ Configura√ß√µes revers√≠veis"
    echo "   ‚Ä¢ Foco em compatibilidade"
    echo ""
    
    if confirm "Executar modo empresarial?" "y"; then
        run_enterprise_optimization
    fi
}

# =============================================================================
# FUN√á√ïES DE EXECU√á√ÉO COMPLETA
# =============================================================================

run_full_optimization() {
    log_info "üöÄ Iniciando otimiza√ß√£o completa..."
    
    # 1. Valida√ß√£o sistema
    source "$SCRIPT_DIR/lib/validation.sh"
    validate_system_requirements
    
    # 2. Verifica√ß√£o empresarial
    source "$SCRIPT_DIR/modules/enterprise-conflicts.sh"
    check_enterprise_conflicts
    
    # 3. Backup
    source "$SCRIPT_DIR/lib/backup.sh"
    create_system_backup
    
    # 4. Ferramentas comunidade
    "$SCRIPT_DIR/install-community-tools.sh"
    
    # 5. Configura√ß√µes desenvolvimento
    source "$SCRIPT_DIR/modules/development-config.sh"
    apply_development_config
    
    # 6. Sistema manuten√ß√£o
    source "$SCRIPT_DIR/modules/smart-maintenance.sh"
    setup_smart_maintenance
    
    # 7. Scripts utilit√°rios
    source "$SCRIPT_DIR/modules/utility-scripts.sh"
    create_utility_scripts
    
    # 8. Docker (se dispon√≠vel)
    if command -v docker >/dev/null 2>&1; then
        source "$SCRIPT_DIR/modules/docker-cleanup.sh"
        setup_smart_docker_cleanup
    fi
    
    show_completion_report
}

run_enterprise_optimization() {
    log_info "üè¢ Iniciando modo empresarial..."
    
    # Verifica√ß√£o extensiva
    source "$SCRIPT_DIR/modules/enterprise-conflicts.sh"
    check_enterprise_conflicts_extensive
    
    # Backup obrigat√≥rio
    source "$SCRIPT_DIR/lib/backup.sh"
    create_system_backup
    
    # Apenas ferramentas seguras
    install_safe_community_tools
    
    # Configura√ß√µes m√≠nimas
    source "$SCRIPT_DIR/modules/essential-tweaks.sh"
    apply_essential_tweaks
    
    # Scripts utilit√°rios (sempre seguros)
    source "$SCRIPT_DIR/modules/utility-scripts.sh"
    create_utility_scripts
    
    show_enterprise_report
}

# =============================================================================
# FUN√á√ïES DE INFORMA√á√ÉO
# =============================================================================

show_system_status() {
    clear
    echo -e "${BLUE}üìä STATUS ATUAL DO SISTEMA${NC}"
    echo "================================"
    echo ""
    
    # Usar script dev-status se dispon√≠vel
    if [[ -f /usr/local/bin/dev-status ]]; then
        /usr/local/bin/dev-status
    else
        # Fallback b√°sico
        echo "üíæ ESPA√áO:"
        df -h / | awk 'NR==2 {printf "   %s usado de %s (%s livre)\n", $3, $2, $4}'
        echo ""
        echo "üñ•Ô∏è SISTEMA:"
        echo "   RAM: $(free -h | awk '/^Mem:/{printf "%s usado de %s", $3, $2}')"
        echo "   CPU: $(nproc) cores"
        echo ""
        echo "üîß OTIMIZA√á√ïES:"
        [[ -f /etc/sysctl.d/99-dev-*.conf ]] && echo "   ‚úÖ Configura√ß√µes sysctl aplicadas" || echo "   ‚ùå Sem configura√ß√µes sysctl"
        command -v tlp >/dev/null && echo "   ‚úÖ TLP instalado" || echo "   ‚ùå TLP n√£o instalado"
        command -v auto-cpufreq >/dev/null && echo "   ‚úÖ auto-cpufreq instalado" || echo "   ‚ùå auto-cpufreq n√£o instalado"
    fi
    
    pause_and_return
}

test_optimizations() {
    clear
    echo -e "${BLUE}üß™ TESTANDO OTIMIZA√á√ïES${NC}"
    echo "========================"
    echo ""
    
    if [[ -f /usr/local/bin/dev-benchmark ]]; then
        /usr/local/bin/dev-benchmark
    else
        echo "‚ö†Ô∏è Script de benchmark n√£o encontrado"
        echo "Execute primeiro: op√ß√£o 5 (Scripts utilit√°rios)"
    fi
    
    pause_and_return
}

show_help() {
    clear
    echo -e "${BLUE}‚ùì AJUDA E DOCUMENTA√á√ÉO${NC}"
    echo "========================"
    echo ""
    echo -e "${GREEN}üìñ FILOSOFIA DO PROJETO:${NC}"
    echo "   Este optimizer usa abordagem h√≠brida:"
    echo "   ‚Ä¢ Ferramentas da comunidade para performance base"
    echo "   ‚Ä¢ Configura√ß√µes √∫nicas para ambiente empresarial"
    echo "   ‚Ä¢ Scripts pr√°ticos para desenvolvimento"
    echo ""
    echo -e "${GREEN}üéØ QUANDO USAR CADA OP√á√ÉO:${NC}"
    echo ""
    echo -e "${YELLOW}1. Ferramentas comunidade:${NC}"
    echo "   ‚Üí Primeira vez, laptop novo"
    echo "   ‚Üí Quer melhor performance geral"
    echo ""
    echo -e "${YELLOW}2. Verifica√ß√£o empresarial:${NC}"
    echo "   ‚Üí Laptop da empresa"
    echo "   ‚Üí Tem VPN, Docker, SSH configurado"
    echo ""
    echo -e "${YELLOW}3. Config desenvolvimento:${NC}"
    echo "   ‚Üí Programador/desenvolvedor"
    echo "   ‚Üí Usa IDEs, Node.js, Docker"
    echo ""
    echo -e "${YELLOW}8. Otimiza√ß√£o completa:${NC}"
    echo "   ‚Üí Laptop pessoal"
    echo "   ‚Üí Primeira execu√ß√£o"
    echo "   ‚Üí Quer tudo configurado"
    echo ""
    echo -e "${YELLOW}9. Modo empresarial:${NC}"
    echo "   ‚Üí Laptop da empresa"
    echo "   ‚Üí M√°xima compatibilidade"
    echo "   ‚Üí Configura√ß√µes conservadoras"
    echo ""
    
    pause_and_return
}

show_completion_report() {
    clear
    echo -e "${GREEN}
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üéâ OTIMIZA√á√ÉO COMPLETA CONCLU√çDA                         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
${NC}"
    
    echo ""
    echo -e "${GREEN}‚úÖ APLICADO:${NC}"
    echo "   üåç Ferramentas da comunidade instaladas"
    echo "   üõ†Ô∏è Configura√ß√µes de desenvolvimento aplicadas"
    echo "   üßπ Sistema de manuten√ß√£o ativo"
    echo "   ‚ö° Scripts utilit√°rios dispon√≠veis"
    echo ""
    echo -e "${BLUE}üéØ COMANDOS DISPON√çVEIS:${NC}"
    echo "   dev-status    - Ver status do sistema"
    echo "   dev-clean     - Limpeza inteligente"
    echo "   dev-health    - Health check"
    echo "   dev-benchmark - Testar performance"
    echo ""
    echo -e "${YELLOW}üîÑ PR√ìXIMOS PASSOS:${NC}"
    echo "   1. Reiniciar: sudo reboot"
    echo "   2. Testar: dev-status"
    echo "   3. Benchmark: dev-benchmark"
    echo ""
    
    pause_and_return
}

# =============================================================================
# MAIN
# =============================================================================

main() {
    # Carregar configura√ß√£o
    [[ -f "$CONFIG_FILE" ]] && source "$CONFIG_FILE"
    
    # Verifica√ß√£o b√°sica
    if [[ $EUID -eq 0 ]]; then
        log_error "N√£o execute como root! Use: ./optimize-laptop.sh"
        exit 1
    fi
    
    # Menu principal
    while true; do
        show_main_menu
    done
}

# Executar se chamado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi